for (i in 0:sites){
export <- master_Food %>% select(2, 1)
export <- export[-1,] #drop header
output <- paste0(userpath, 'site_', i, '/Bass_population/Inputs/Forcings/Food_Characterization.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Management.csv for each site
for (i in 0:sites){
column <- i + 3
export <- master_Management %>% select(1, 2, column)
output <- paste0(userpath, 'site_', i, '/Bass_population/Inputs/Population_management/Management.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Parameters.csv for each site (same for all sites)
for (i in 0:sites){
export <- master_Parameters %>% select(1, 2, 5, 3, 4)
output <- paste0(userpath, 'site_', i, '/Bass_population/Inputs/Parameters/Parameters.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Population.csv for each site
for (i in 0:sites){
column <- i + 5
export <- master_Population %>% select(1, 2, column, 3, 4)
output <- paste0(userpath, 'site_', i, '/Bass_population/Inputs/Parameters/Population.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#load and run model
for (i in 1:sites){
userpath <- paste0(userpath, "/site_", i)
#load environmental variables
forcings <- Bass_pop_dataloader(userpath)
#run growth model
#output <- Bass_pop_main_revised("../R", forcings)}
output <- Bass_pop_main("../R", forcings)}
#load and run model
for (i in 1:sites){
userpath <- paste0(userpath, "/site_", i)
#load environmental variables
forcings <- Bass_pop_dataloader(userpath)
#run growth model
#output <- Bass_pop_main_revised("../R", forcings)}
output <- Bass_pop_main("../R", forcings)}
library(RAC)
library(dplyr)
setwd("/Users/Zack/0_seawarden/r/RAC_seabass_all/") #working directory
userpath <- "/Users/Zack/0_seawarden/r/RAC_seabass_all/"
#command + shift + c
Bass_pop_main_revised <- function (userpath, forcings)
{
rm(list = ls())
cat("Sea Bass population bioenergetic model\n")
cat(" \n")
currentpath = getwd()
out_pre <- Bass_pop_pre(userpath, forcings)
selector = "y"
while (identical(selector, "y") == "TRUE") {
cat(" \n")
selector = readline("Do you want to change the inputs? [y/n]")
if (identical(selector, "n") == "TRUE") {
break
}
cat(" \n")
cat("Insert forcings and parameters in the following folder\n")
cat(paste0(userpath, "/Bass_population/Inputs\n"))
cat(" \n")
cat("Type y if you entered the correct inputs\n")
cat("The data will be preprocessed again")
selector = readline(" ")
out_pre <- Bass_pop_pre(userpath, forcings)
selector = "y"
}
Param = out_pre[[1]]
Tint = out_pre[[2]]
Gint = out_pre[[3]]
Food = out_pre[[4]]
IC = out_pre[[5]]
times = out_pre[[6]]
Dates = out_pre[[7]]
N = out_pre[[8]]
CS = out_pre[[9]]
out_RKsolver <- Bass_pop_loop(Param, Tint, Gint, Food, IC,
times, N, userpath)
out_post <- Bass_pop_post(userpath, out_RKsolver, times,
Dates, N, CS)
cat(" ")
cat("End")
return(out_post)
}
#load sst files
sst_folder <- '/Users/Zack/0_thesis_sst/ghrsst_2018_csv/'
sst_list <- list.files(sst_folder, pattern = '.csv')
master_files <- paste0(userpath, 'input_all_sites/')
#master_files <- paste0(userpath, 'master_files_2/')
master_Feeding <- read.csv(paste0(master_files, 'master_RAC-seabass - Feeding.csv'), header=TRUE, sep=",")
master_Food <- read.csv(paste0(master_files, 'master_RAC-seabass - Food_Characterization.csv'), header=FALSE, sep=",")
master_Parameters <- read.csv(paste0(master_files, 'master_RAC-seabass - Parameters.csv'), header=FALSE, sep=",")
master_Management <- read.csv(paste0(master_files, 'master_RAC-seabass - Management.csv'), header=FALSE, sep=",")
master_Population <- read.csv(paste0(master_files, 'master_RAC-seabass - Population.csv'), header=FALSE, sep=",")
#create folder for each site, #add SST data
#sites <- length(sst_list)
sites <- 2
for (i in 0:sites){
#create a folder for each site
site_folder <- paste0(userpath, '/site_', i, '/')
dir.create(site_folder)
#create RAC folders for each site
Bass_pop_skeleton(site_folder)
#add SST data
orglocation <- paste0(sst_folder, i, '_sst.csv')
newlocation <- paste0(site_folder, 'Bass_population/Inputs/Forcings/')
file.copy(from=orglocation, to=newlocation, overwrite = TRUE, recursive = FALSE, copy.mode = TRUE)
file.remove(paste0(newlocation, 'Water_temperature.csv'))
file.rename(paste0(newlocation, i, '_sst.csv'), paste0(newlocation, 'Water_temperature.csv'))}
#generate Feeding.csv for each site
for (i in 0:sites){
column <- 2 + i
export <- master_Feeding %>% select(1, column)
output <- paste0(userpath, 'site_', i, '/Bass_population/Inputs/Forcings/Feeding.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Food_Characterization.csv for each site (same for all sites)
for (i in 0:sites){
export <- master_Food %>% select(2, 1)
export <- export[-1,] #drop header
output <- paste0(userpath, 'site_', i, '/Bass_population/Inputs/Forcings/Food_Characterization.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Management.csv for each site
for (i in 0:sites){
column <- i + 3
export <- master_Management %>% select(1, 2, column)
output <- paste0(userpath, 'site_', i, '/Bass_population/Inputs/Population_management/Management.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Parameters.csv for each site (same for all sites)
for (i in 0:sites){
export <- master_Parameters %>% select(1, 2, 5, 3, 4)
output <- paste0(userpath, 'site_', i, '/Bass_population/Inputs/Parameters/Parameters.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Population.csv for each site
for (i in 0:sites){
column <- i + 5
export <- master_Population %>% select(1, 2, column, 3, 4)
output <- paste0(userpath, 'site_', i, '/Bass_population/Inputs/Parameters/Population.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#load and run model
for (i in 1:sites){
userpath <- paste0(userpath, "/site_", i)
#load environmental variables
forcings <- Bass_pop_dataloader(userpath)
#run growth model
#output <- Bass_pop_main_revised("../R", forcings)}
output <- Bass_pop_main("../R", forcings)}
#load and run model
for (i in 0:sites){
userpath <- paste0(userpath, "/site_", i)
#load environmental variables
forcings <- Bass_pop_dataloader(userpath)
#run growth model
#output <- Bass_pop_main_revised("../R", forcings)}
output <- Bass_pop_main("../R", forcings)}
library(RAC)
library(dplyr)
setwd("/Users/Zack/0_seawarden/r/RAC_seabass_all/") #working directory
userpath <- "/Users/Zack/0_seawarden/r/RAC_seabass_all/"
#command + shift + c
Bass_pop_main_revised <- function (userpath, forcings)
{
rm(list = ls())
cat("Sea Bass population bioenergetic model\n")
cat(" \n")
currentpath = getwd()
out_pre <- Bass_pop_pre(userpath, forcings)
selector = "y"
while (identical(selector, "y") == "TRUE") {
cat(" \n")
selector = readline("Do you want to change the inputs? [y/n]")
if (identical(selector, "n") == "TRUE") {
break
}
cat(" \n")
cat("Insert forcings and parameters in the following folder\n")
cat(paste0(userpath, "/Bass_population/Inputs\n"))
cat(" \n")
cat("Type y if you entered the correct inputs\n")
cat("The data will be preprocessed again")
selector = readline(" ")
out_pre <- Bass_pop_pre(userpath, forcings)
selector = "y"
}
Param = out_pre[[1]]
Tint = out_pre[[2]]
Gint = out_pre[[3]]
Food = out_pre[[4]]
IC = out_pre[[5]]
times = out_pre[[6]]
Dates = out_pre[[7]]
N = out_pre[[8]]
CS = out_pre[[9]]
out_RKsolver <- Bass_pop_loop(Param, Tint, Gint, Food, IC,
times, N, userpath)
out_post <- Bass_pop_post(userpath, out_RKsolver, times,
Dates, N, CS)
cat(" ")
cat("End")
return(out_post)
}
#load sst files
sst_folder <- '/Users/Zack/0_thesis_sst/ghrsst_2018_csv/'
sst_list <- list.files(sst_folder, pattern = '.csv')
master_files <- paste0(userpath, 'input_all_sites/')
#master_files <- paste0(userpath, 'master_files_2/')
master_Feeding <- read.csv(paste0(master_files, 'master_RAC-seabass - Feeding.csv'), header=TRUE, sep=",")
master_Food <- read.csv(paste0(master_files, 'master_RAC-seabass - Food_Characterization.csv'), header=FALSE, sep=",")
master_Parameters <- read.csv(paste0(master_files, 'master_RAC-seabass - Parameters.csv'), header=FALSE, sep=",")
master_Management <- read.csv(paste0(master_files, 'master_RAC-seabass - Management.csv'), header=FALSE, sep=",")
master_Population <- read.csv(paste0(master_files, 'master_RAC-seabass - Population.csv'), header=FALSE, sep=",")
#create folder for each site, #add SST data
#sites <- length(sst_list)
sites <- 2
for (i in 0:sites){
#create a folder for each site
site_folder <- paste0(userpath, '/site_', i, '/')
dir.create(site_folder)
#create RAC folders for each site
Bass_pop_skeleton(site_folder)
#add SST data
orglocation <- paste0(sst_folder, i, '_sst.csv')
newlocation <- paste0(site_folder, 'Bass_population/Inputs/Forcings/')
file.copy(from=orglocation, to=newlocation, overwrite = TRUE, recursive = FALSE, copy.mode = TRUE)
file.remove(paste0(newlocation, 'Water_temperature.csv'))
file.rename(paste0(newlocation, i, '_sst.csv'), paste0(newlocation, 'Water_temperature.csv'))}
#generate Feeding.csv for each site
for (i in 0:sites){
column <- 2 + i
export <- master_Feeding %>% select(1, column)
output <- paste0(userpath, 'site_', i, '/Bass_population/Inputs/Forcings/Feeding.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Food_Characterization.csv for each site (same for all sites)
for (i in 0:sites){
export <- master_Food %>% select(2, 1)
export <- export[-1,] #drop header
output <- paste0(userpath, 'site_', i, '/Bass_population/Inputs/Forcings/Food_Characterization.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Management.csv for each site
for (i in 0:sites){
column <- i + 3
export <- master_Management %>% select(1, 2, column)
output <- paste0(userpath, 'site_', i, '/Bass_population/Inputs/Population_management/Management.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Parameters.csv for each site (same for all sites)
for (i in 0:sites){
export <- master_Parameters %>% select(1, 2, 5, 3, 4)
output <- paste0(userpath, 'site_', i, '/Bass_population/Inputs/Parameters/Parameters.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Population.csv for each site
for (i in 0:sites){
column <- i + 5
export <- master_Population %>% select(1, 2, column, 3, 4)
output <- paste0(userpath, 'site_', i, '/Bass_population/Inputs/Parameters/Population.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#load and run model
for (i in 0:sites){
userpath <- paste0(userpath, "/site_", i)
#load environmental variables
forcings <- Bass_pop_dataloader(userpath)
#run growth model
#output <- Bass_pop_main_revised("../R", forcings)}
output <- Bass_pop_main("../R", forcings)}
library(RAC)
library(dplyr)
setwd("/Users/Zack/0_seawarden/r/RAC_seabass_all/") #working directory
userpath <- "/Users/Zack/0_seawarden/r/RAC_seabass_all/"
#command + shift + c
Bass_pop_main_revised <- function (userpath, forcings)
{
rm(list = ls())
cat("Sea Bass population bioenergetic model\n")
cat(" \n")
currentpath = getwd()
out_pre <- Bass_pop_pre(userpath, forcings)
selector = "y"
while (identical(selector, "y") == "TRUE") {
cat(" \n")
selector = readline("Do you want to change the inputs? [y/n]")
if (identical(selector, "n") == "TRUE") {
break
}
cat(" \n")
cat("Insert forcings and parameters in the following folder\n")
cat(paste0(userpath, "/Bass_population/Inputs\n"))
cat(" \n")
cat("Type y if you entered the correct inputs\n")
cat("The data will be preprocessed again")
selector = readline(" ")
out_pre <- Bass_pop_pre(userpath, forcings)
selector = "y"
}
Param = out_pre[[1]]
Tint = out_pre[[2]]
Gint = out_pre[[3]]
Food = out_pre[[4]]
IC = out_pre[[5]]
times = out_pre[[6]]
Dates = out_pre[[7]]
N = out_pre[[8]]
CS = out_pre[[9]]
out_RKsolver <- Bass_pop_loop(Param, Tint, Gint, Food, IC,
times, N, userpath)
out_post <- Bass_pop_post(userpath, out_RKsolver, times,
Dates, N, CS)
cat(" ")
cat("End")
return(out_post)
}
#load sst files
sst_folder <- '/Users/Zack/0_thesis_sst/ghrsst_2018_csv/'
sst_list <- list.files(sst_folder, pattern = '.csv')
master_files <- paste0(userpath, 'input_all_sites/')
#master_files <- paste0(userpath, 'master_files_2/')
master_Feeding <- read.csv(paste0(master_files, 'master_RAC-seabass - Feeding.csv'), header=TRUE, sep=",")
master_Food <- read.csv(paste0(master_files, 'master_RAC-seabass - Food_Characterization.csv'), header=FALSE, sep=",")
master_Parameters <- read.csv(paste0(master_files, 'master_RAC-seabass - Parameters.csv'), header=FALSE, sep=",")
master_Management <- read.csv(paste0(master_files, 'master_RAC-seabass - Management.csv'), header=FALSE, sep=",")
master_Population <- read.csv(paste0(master_files, 'master_RAC-seabass - Population.csv'), header=FALSE, sep=",")
#create folder for each site, #add SST data
#sites <- length(sst_list)
sites <- 2
for (i in 0:sites){
#create a folder for each site
site_folder <- paste0(userpath, '/site_', i, '/')
dir.create(site_folder)
#create RAC folders for each site
Bass_pop_skeleton(site_folder)
#add SST data
orglocation <- paste0(sst_folder, i, '_sst.csv')
newlocation <- paste0(site_folder, 'Bass_population/Inputs/Forcings/')
file.copy(from=orglocation, to=newlocation, overwrite = TRUE, recursive = FALSE, copy.mode = TRUE)
file.remove(paste0(newlocation, 'Water_temperature.csv'))
file.rename(paste0(newlocation, i, '_sst.csv'), paste0(newlocation, 'Water_temperature.csv'))}
#generate Feeding.csv for each site
for (i in 0:sites){
column <- 2 + i
export <- master_Feeding %>% select(1, column)
output <- paste0(userpath, 'site_', i, '/Bass_population/Inputs/Forcings/Feeding.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Food_Characterization.csv for each site (same for all sites)
for (i in 0:sites){
export <- master_Food %>% select(2, 1)
export <- export[-1,] #drop header
output <- paste0(userpath, 'site_', i, '/Bass_population/Inputs/Forcings/Food_Characterization.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Management.csv for each site
for (i in 0:sites){
column <- i + 3
export <- master_Management %>% select(1, 2, column)
output <- paste0(userpath, 'site_', i, '/Bass_population/Inputs/Population_management/Management.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Parameters.csv for each site (same for all sites)
for (i in 0:sites){
export <- master_Parameters %>% select(1, 2, 5, 3, 4)
output <- paste0(userpath, 'site_', i, '/Bass_population/Inputs/Parameters/Parameters.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Population.csv for each site
for (i in 0:sites){
column <- i + 5
export <- master_Population %>% select(1, 2, column, 3, 4)
output <- paste0(userpath, 'site_', i, '/Bass_population/Inputs/Parameters/Population.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#load and run model
for (i in 0:sites){
path <- paste0(userpath, "/site_", i)
#load environmental variables
forcings <- Bass_pop_dataloader(path)
#run growth model
#output <- Bass_pop_main_revised("../R", forcings)}
output <- Bass_pop_main("../R", forcings)}
y
y
#load and run model
for (i in 0:sites){
path <- paste0(userpath, "/site_", i)
#load environmental variables
forcings <- Bass_pop_dataloader(path)
#run growth model
#output <- Bass_pop_main_revised("../R", forcings)}
output <- Bass_pop_main("../R", forcings)}
#load and run model
for (i in 1:sites){
path <- paste0(userpath, "/site_", i)
#load environmental variables
forcings <- Bass_pop_dataloader(path)
#run growth model
#output <- Bass_pop_main_revised("../R", forcings)}
output <- Bass_pop_main("../R", forcings)}
library(RAC)
library(dplyr)
setwd("/Users/Zack/0_seawarden/r/RAC_seabass_all/") #working directory
userpath <- "/Users/Zack/0_seawarden/r/RAC_seabass_all/"
#command + shift + c
Bass_pop_main_revised <- function (userpath, forcings)
{
rm(list = ls())
cat("Sea Bass population bioenergetic model\n")
cat(" \n")
currentpath = getwd()
out_pre <- Bass_pop_pre(userpath, forcings)
selector = "y"
while (identical(selector, "y") == "TRUE") {
cat(" \n")
selector = readline("Do you want to change the inputs? [y/n]")
if (identical(selector, "n") == "TRUE") {
break
}
cat(" \n")
cat("Insert forcings and parameters in the following folder\n")
cat(paste0(userpath, "/Bass_population/Inputs\n"))
cat(" \n")
cat("Type y if you entered the correct inputs\n")
cat("The data will be preprocessed again")
selector = readline(" ")
out_pre <- Bass_pop_pre(userpath, forcings)
selector = "y"
}
Param = out_pre[[1]]
Tint = out_pre[[2]]
Gint = out_pre[[3]]
Food = out_pre[[4]]
IC = out_pre[[5]]
times = out_pre[[6]]
Dates = out_pre[[7]]
N = out_pre[[8]]
CS = out_pre[[9]]
out_RKsolver <- Bass_pop_loop(Param, Tint, Gint, Food, IC,
times, N, userpath)
out_post <- Bass_pop_post(userpath, out_RKsolver, times,
Dates, N, CS)
cat(" ")
cat("End")
return(out_post)
}
#load sst files
sst_folder <- '/Users/Zack/0_thesis_sst/ghrsst_2018_csv/'
sst_list <- list.files(sst_folder, pattern = '.csv')
master_files <- paste0(userpath, 'input_all_sites/')
#master_files <- paste0(userpath, 'master_files_2/')
master_Feeding <- read.csv(paste0(master_files, 'master_RAC-seabass - Feeding.csv'), header=TRUE, sep=",")
master_Food <- read.csv(paste0(master_files, 'master_RAC-seabass - Food_Characterization.csv'), header=FALSE, sep=",")
master_Parameters <- read.csv(paste0(master_files, 'master_RAC-seabass - Parameters.csv'), header=FALSE, sep=",")
master_Management <- read.csv(paste0(master_files, 'master_RAC-seabass - Management.csv'), header=FALSE, sep=",")
master_Population <- read.csv(paste0(master_files, 'master_RAC-seabass - Population.csv'), header=FALSE, sep=",")
#create folder for each site, #add SST data
#sites <- length(sst_list)
sites <- 2
for (i in 0:sites){
#create a folder for each site
site_folder <- paste0(userpath, '/site_', i, '/')
dir.create(site_folder)
#create RAC folders for each site
Bass_pop_skeleton(site_folder)
#add SST data
orglocation <- paste0(sst_folder, i, '_sst.csv')
newlocation <- paste0(site_folder, 'Bass_population/Inputs/Forcings/')
file.copy(from=orglocation, to=newlocation, overwrite = TRUE, recursive = FALSE, copy.mode = TRUE)
file.remove(paste0(newlocation, 'Water_temperature.csv'))
file.rename(paste0(newlocation, i, '_sst.csv'), paste0(newlocation, 'Water_temperature.csv'))}
#generate Feeding.csv for each site
for (i in 0:sites){
column <- 2 + i
export <- master_Feeding %>% select(1, column)
output <- paste0(userpath, 'site_', i, '/Bass_population/Inputs/Forcings/Feeding.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Food_Characterization.csv for each site (same for all sites)
for (i in 0:sites){
export <- master_Food %>% select(2, 1)
export <- export[-1,] #drop header
output <- paste0(userpath, 'site_', i, '/Bass_population/Inputs/Forcings/Food_Characterization.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Management.csv for each site
for (i in 0:sites){
column <- i + 3
export <- master_Management %>% select(1, 2, column)
output <- paste0(userpath, 'site_', i, '/Bass_population/Inputs/Population_management/Management.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Parameters.csv for each site (same for all sites)
for (i in 0:sites){
export <- master_Parameters %>% select(1, 2, 5, 3, 4)
output <- paste0(userpath, 'site_', i, '/Bass_population/Inputs/Parameters/Parameters.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Population.csv for each site
for (i in 0:sites){
column <- i + 5
export <- master_Population %>% select(1, 2, column, 3, 4)
output <- paste0(userpath, 'site_', i, '/Bass_population/Inputs/Parameters/Population.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#load and run model
for (i in 0:sites){
path <- paste0(userpath, "/site_", i)
#load environmental variables
forcings <- Bass_pop_dataloader(path)
#run growth model
#output <- Bass_pop_main_revised("../R", forcings)}
output <- Bass_pop_main("../R", forcings)}
#load and run model
for (i in 1:sites){
path <- paste0(userpath, "/site_", i)
#load environmental variables
forcings <- Bass_pop_dataloader(path)
#run growth model
#output <- Bass_pop_main_revised("../R", forcings)}
output <- Bass_pop_main("../R", forcings)}
#load and run model
for (i in 0:sites){
userpath <- paste0(userpath, "/site_", i)
#load environmental variables
forcings <- Bass_pop_dataloader(userpath)
#run growth model
#output <- Bass_pop_main_revised("../R", forcings)}
output <- Bass_pop_main("../R", forcings)}
