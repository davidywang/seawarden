export <- population_prep %>% select(1, 2, column, 3, 4)}
output <- paste0(rac_folder, 'site_', i, '/Bass_population/Inputs/Parameters/Population.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Parameters.csv for each site
for (i in sites){
export <- parameters %>% select(1, 2, 5, 3, 4) #5 prep parameters
output <- paste0(rac_folder, 'site_', i, '/Bass_population/Inputs/Parameters/Parameters.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Feeding.csv for each site
for (i in sites){
output <- paste0(rac_folder, 'site_', i, '/Bass_population/Inputs/Forcings/Feeding.csv')
write.table(feeding_prep, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Management.csv for each site
for (i in sites){
export <- management %>% select(1, 2, 3)
output <- paste0(rac_folder, 'site_', i, '/Bass_population/Inputs/Population_management/Management.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Food_Characterization.csv for each site
for (i in sites){
export <- food %>% select(2, 1)
export <- export[-1,] #drop header
output <- paste0(rac_folder, 'site_', i, '/Bass_population/Inputs/Forcings/Food_Characterization.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#first model run to generate feeding tables
trace(Bass_pop_main,edit=T) #delete selector = "y"
for (i in sites){
userpath <- paste0(rac_folder, "site_", i)
setwd(userpath) #working directory
forcings <- Bass_pop_dataloader(userpath) #load environmental variables
output <- Bass_pop_main(userpath, forcings)} #run growth model
#generate final feeding tables
feeding <- function(rac_folder, i){
site_folder <- paste0('site_', i, '/Bass_population/Outputs/Out_csv/')
ingestion <- read.csv(paste0(rac_folder, site_folder, 'actual_ingestion.csv'), header=TRUE, sep=",")
ingestion <- ingestion %>% select(V1)
compiled <- cbind(date, ingestion)
name <- paste0(rac_folder, 'feeding_files/site_', i, '_feeding.csv')
write.table(compiled, file = name, row.names=FALSE, col.names = TRUE, sep=",")}
date <- feeding_prep %>% select(date)
date <- date$date[1:547]
for (i in sites){
feeding(rac_folder, i)}
#load data for final model run
#generate Population.csv for each site
for (i in sites){
for (j in 0:(length(sites)-1)){
column <- j + 5
export <- population %>% select(1, 2, column, 3, 4)}
output <- paste0(rac_folder, 'site_', i, '/Bass_population/Inputs/Parameters/Population.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Parameters.csv for each site
for (i in sites){
export <- parameters %>% select(1, 2, 6, 3, 4) #final parameters
output <- paste0(rac_folder, 'site_', i, '/Bass_population/Inputs/Parameters/Parameters.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Feeding.csv for each site
for (i in sites){
feed <- read.csv(paste0(rac_folder, 'feeding_files/site_', i, '_feeding.csv'))
output <- paste0(rac_folder, 'site_', i, '/Bass_population/Inputs/Forcings/Feeding.csv')
write.table(feed, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
for (i in sites){
userpath <- paste0(rac_folder, "site_", i)
setwd(userpath) #working directory
forcings <- Bass_pop_dataloader(userpath) #load environmental variables
output <- Bass_pop_main(userpath, forcings)} #run growth model
library(RAC)
library(dplyr)
#command + shift + c
#load sst files
sst_folder <- '/Users/Zack/0_thesis_sst/ghrsst_csv_test/'
sst_list <- list.files(sst_folder, pattern = '.csv')
#load master files
rac_folder <- "/Users/Zack/0_seawarden/r_rac/rac_seabass/"
master_files <- paste0(rac_folder, 'master_files/master_RAC-seabass - ')
#prep files to generate feeding tables
feeding_prep <- read.csv(paste0(master_files, 'Feeding_Prep.csv'), header=TRUE, sep=",")
population_prep <- read.csv(paste0(master_files, 'Population_Prep.csv'), header=FALSE, sep=",")
#files for final model run
population <- read.csv(paste0(master_files, 'Population.csv'), header=FALSE, sep=",")
parameters <- read.csv(paste0(master_files, 'Parameters.csv'), header=FALSE, sep=",")
#files for both steps
management <- read.csv(paste0(master_files, 'Management.csv'), header=FALSE, sep=",")
food <- read.csv(paste0(master_files, 'Food_Characterization.csv'), header=FALSE, sep=",")
#sites <- list(23, 71, 92, 165, 172, 219) #study sites
sites <- list(165, 172, 219) #study sites
#create folder for each site, #add SST data
for (i in sites){
#create a folder for each site
site_folder <- paste0(rac_folder, 'site_', i, '/')
dir.create(site_folder)
#create RAC folders for each site
Bass_pop_skeleton(site_folder)
#add SST data
orglocation <- paste0(sst_folder, i, '_sst.csv')
newlocation <- paste0(site_folder, 'Bass_population/Inputs/Forcings/')
file.copy(from=orglocation, to=newlocation, overwrite = TRUE, recursive = FALSE, copy.mode = TRUE)
file.remove(paste0(newlocation, 'Water_temperature.csv'))
file.rename(paste0(newlocation, i, '_sst.csv'), paste0(newlocation, 'Water_temperature.csv'))}
#load prep files for each site
#generate Population.csv for each site
for (i in sites){
for (j in 0:(length(sites)-1)){
column <- j + 5
export <- population_prep %>% select(1, 2, column, 3, 4)}
output <- paste0(rac_folder, 'site_', i, '/Bass_population/Inputs/Parameters/Population.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Parameters.csv for each site
for (i in sites){
export <- parameters %>% select(1, 2, 5, 3, 4) #5 prep parameters
output <- paste0(rac_folder, 'site_', i, '/Bass_population/Inputs/Parameters/Parameters.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Feeding.csv for each site
for (i in sites){
output <- paste0(rac_folder, 'site_', i, '/Bass_population/Inputs/Forcings/Feeding.csv')
write.table(feeding_prep, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Management.csv for each site
for (i in sites){
export <- management %>% select(1, 2, 3)
output <- paste0(rac_folder, 'site_', i, '/Bass_population/Inputs/Population_management/Management.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Food_Characterization.csv for each site
for (i in sites){
export <- food %>% select(2, 1)
export <- export[-1,] #drop header
output <- paste0(rac_folder, 'site_', i, '/Bass_population/Inputs/Forcings/Food_Characterization.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#first model run to generate feeding tables
trace(Bass_pop_main,edit=T) #delete selector = "y"
for (i in sites){
userpath <- paste0(rac_folder, "site_", i)
setwd(userpath) #working directory
forcings <- Bass_pop_dataloader(userpath) #load environmental variables
output <- Bass_pop_main(userpath, forcings)} #run growth model
library(RAC)
library(dplyr)
#command + shift + c
#load sst files
sst_folder <- '/Users/Zack/0_thesis_sst/ghrsst_csv_test/'
sst_list <- list.files(sst_folder, pattern = '.csv')
#load master files
rac_folder <- "/Users/Zack/0_seawarden/r_rac/rac_seabass/"
master_files <- paste0(rac_folder, 'master_files/master_RAC-seabass - ')
#prep files to generate feeding tables
feeding_prep <- read.csv(paste0(master_files, 'Feeding_Prep.csv'), header=TRUE, sep=",")
population_prep <- read.csv(paste0(master_files, 'Population_Prep.csv'), header=FALSE, sep=",")
#files for final model run
population <- read.csv(paste0(master_files, 'Population.csv'), header=FALSE, sep=",")
parameters <- read.csv(paste0(master_files, 'Parameters.csv'), header=FALSE, sep=",")
#files for both steps
management <- read.csv(paste0(master_files, 'Management.csv'), header=FALSE, sep=",")
food <- read.csv(paste0(master_files, 'Food_Characterization.csv'), header=FALSE, sep=",")
#sites <- list(23, 71, 92, 165, 172, 219) #study sites
sites <- list(23, 71, 92) #study sites
#create folder for each site, #add SST data
for (i in sites){
#create a folder for each site
site_folder <- paste0(rac_folder, 'site_', i, '/')
dir.create(site_folder)
#create RAC folders for each site
Bass_pop_skeleton(site_folder)
#add SST data
orglocation <- paste0(sst_folder, i, '_sst.csv')
newlocation <- paste0(site_folder, 'Bass_population/Inputs/Forcings/')
file.copy(from=orglocation, to=newlocation, overwrite = TRUE, recursive = FALSE, copy.mode = TRUE)
file.remove(paste0(newlocation, 'Water_temperature.csv'))
file.rename(paste0(newlocation, i, '_sst.csv'), paste0(newlocation, 'Water_temperature.csv'))}
#load prep files for each site
#generate Population.csv for each site
for (i in sites){
for (j in 0:(length(sites)-1)){
column <- j + 5
export <- population_prep %>% select(1, 2, column, 3, 4)}
output <- paste0(rac_folder, 'site_', i, '/Bass_population/Inputs/Parameters/Population.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Parameters.csv for each site
for (i in sites){
export <- parameters %>% select(1, 2, 5, 3, 4) #5 prep parameters
output <- paste0(rac_folder, 'site_', i, '/Bass_population/Inputs/Parameters/Parameters.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Feeding.csv for each site
for (i in sites){
output <- paste0(rac_folder, 'site_', i, '/Bass_population/Inputs/Forcings/Feeding.csv')
write.table(feeding_prep, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Management.csv for each site
for (i in sites){
export <- management %>% select(1, 2, 3)
output <- paste0(rac_folder, 'site_', i, '/Bass_population/Inputs/Population_management/Management.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Food_Characterization.csv for each site
for (i in sites){
export <- food %>% select(2, 1)
export <- export[-1,] #drop header
output <- paste0(rac_folder, 'site_', i, '/Bass_population/Inputs/Forcings/Food_Characterization.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#first model run to generate feeding tables
trace(Bass_pop_main,edit=T) #delete selector = "y"
for (i in sites){
userpath <- paste0(rac_folder, "site_", i)
setwd(userpath) #working directory
forcings <- Bass_pop_dataloader(userpath) #load environmental variables
output <- Bass_pop_main(userpath, forcings)} #run growth model
library(RAC)
library(dplyr)
#command + shift + c
#load sst files
sst_folder <- '/Users/Zack/0_thesis_sst/ghrsst_csv_test/'
sst_list <- list.files(sst_folder, pattern = '.csv')
#load master files
rac_folder <- "/Users/Zack/0_seawarden/r_rac/rac_bream/"
master_files <- paste0(rac_folder, 'master_files/master_RAC-bream - ')
#prep files to generate feeding tables
feeding_prep <- read.csv(paste0(master_files, 'Feeding_Prep.csv'), header=TRUE, sep=",")
population_prep <- read.csv(paste0(master_files, 'Population_Prep.csv'), header=FALSE, sep=",")
#files for final model run
population <- read.csv(paste0(master_files, 'Population.csv'), header=FALSE, sep=",")
parameters <- read.csv(paste0(master_files, 'Parameters.csv'), header=FALSE, sep=",")
#files for both steps
management <- read.csv(paste0(master_files, 'Management.csv'), header=FALSE, sep=",")
food <- read.csv(paste0(master_files, 'Food_Characterization.csv'), header=FALSE, sep=",")
#sites <- list(23, 71, 92, 165, 172, 219) #study sites
sites <- list(23, 71, 92) #study sites
#create folder for each site, #add SST data
for (i in sites){
#create a folder for each site
site_folder <- paste0(rac_folder, 'site_', i, '/')
dir.create(site_folder)
#create RAC folders for each site
Bream_pop_skeleton(site_folder)
#add SST data
orglocation <- paste0(sst_folder, i, '_sst.csv')
newlocation <- paste0(site_folder, 'Bream_population/Inputs/Forcings/')
file.copy(from=orglocation, to=newlocation, overwrite = TRUE, recursive = FALSE, copy.mode = TRUE)
file.remove(paste0(newlocation, 'Water_temperature.csv'))
file.rename(paste0(newlocation, i, '_sst.csv'), paste0(newlocation, 'Water_temperature.csv'))}
#load prep files for each site
#generate Population.csv for each site
for (i in sites){
for (j in 0:(length(sites)-1)){
column <- j + 5 #!
export <- population_prep %>% select(1, 2, column, 3, 4)}
output <- paste0(rac_folder, 'site_', i, '/Bream_population/Inputs/Parameters/Population.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Parameters.csv for each site
for (i in sites){
export <- parameters %>% select(1, 2, 5, 3, 4) #5 prep parameters
output <- paste0(rac_folder, 'site_', i, '/Bream_population/Inputs/Parameters/Parameters.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Feeding.csv for each site
for (i in sites){
output <- paste0(rac_folder, 'site_', i, '/Bream_population/Inputs/Forcings/Feeding.csv')
write.table(feeding_prep, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Management.csv for each site
for (i in sites){
export <- management %>% select(1, 2, 3)
output <- paste0(rac_folder, 'site_', i, '/Bream_population/Inputs/Population_management/Management.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Food_Characterization.csv for each site
for (i in sites){
export <- food %>% select(2, 1)
export <- export[-1,] #drop header
output <- paste0(rac_folder, 'site_', i, '/Bream_population/Inputs/Forcings/Food_Characterization.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#first model run to generate feeding tables (using lapply instead of a forloop)
trace(Bream_pop_main,edit=T) #delete selector = "y"
pre_rac <- function(sites){
userpath <- paste0(rac_folder, "site_", i)
setwd(userpath) #working directory
forcings <- Bream_pop_dataloader(userpath) #load environmental variables
output <- Bream_pop_main(userpath, forcings)} #run growth model
lapply(sites, pre_rac)
library(RAC)
library(dplyr)
#command + shift + c
#load sst files
sst_folder <- '/Users/Zack/0_thesis_sst/ghrsst_csv_test/'
sst_list <- list.files(sst_folder, pattern = '.csv')
#load master files
rac_folder <- "/Users/Zack/0_seawarden/r_rac/rac_bream/"
master_files <- paste0(rac_folder, 'master_files/master_RAC-bream - ')
#prep files to generate feeding tables
feeding_prep <- read.csv(paste0(master_files, 'Feeding_Prep.csv'), header=TRUE, sep=",")
population_prep <- read.csv(paste0(master_files, 'Population_Prep.csv'), header=FALSE, sep=",")
#files for final model run
population <- read.csv(paste0(master_files, 'Population.csv'), header=FALSE, sep=",")
parameters <- read.csv(paste0(master_files, 'Parameters.csv'), header=FALSE, sep=",")
#files for both steps
management <- read.csv(paste0(master_files, 'Management.csv'), header=FALSE, sep=",")
food <- read.csv(paste0(master_files, 'Food_Characterization.csv'), header=FALSE, sep=",")
#sites <- list(23, 71, 92, 165, 172, 219) #study sites
sites <- list(165, 172, 219) #study sites
#create folder for each site, #add SST data
for (i in sites){
#create a folder for each site
site_folder <- paste0(rac_folder, 'site_', i, '/')
dir.create(site_folder)
#create RAC folders for each site
Bream_pop_skeleton(site_folder)
#add SST data
orglocation <- paste0(sst_folder, i, '_sst.csv')
newlocation <- paste0(site_folder, 'Bream_population/Inputs/Forcings/')
file.copy(from=orglocation, to=newlocation, overwrite = TRUE, recursive = FALSE, copy.mode = TRUE)
file.remove(paste0(newlocation, 'Water_temperature.csv'))
file.rename(paste0(newlocation, i, '_sst.csv'), paste0(newlocation, 'Water_temperature.csv'))}
#load prep files for each site
#generate Population.csv for each site
for (i in sites){
for (j in 0:(length(sites)-1)){
column <- j + 5 #!
export <- population_prep %>% select(1, 2, column, 3, 4)}
output <- paste0(rac_folder, 'site_', i, '/Bream_population/Inputs/Parameters/Population.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Parameters.csv for each site
for (i in sites){
export <- parameters %>% select(1, 2, 5, 3, 4) #5 prep parameters
output <- paste0(rac_folder, 'site_', i, '/Bream_population/Inputs/Parameters/Parameters.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Feeding.csv for each site
for (i in sites){
output <- paste0(rac_folder, 'site_', i, '/Bream_population/Inputs/Forcings/Feeding.csv')
write.table(feeding_prep, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Management.csv for each site
for (i in sites){
export <- management %>% select(1, 2, 3)
output <- paste0(rac_folder, 'site_', i, '/Bream_population/Inputs/Population_management/Management.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Food_Characterization.csv for each site
for (i in sites){
export <- food %>% select(2, 1)
export <- export[-1,] #drop header
output <- paste0(rac_folder, 'site_', i, '/Bream_population/Inputs/Forcings/Food_Characterization.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#first model run to generate feeding tables (using lapply instead of a forloop)
trace(Bream_pop_main,edit=T) #delete selector = "y"
# pre_rac <- function(sites){
#   userpath <- paste0(rac_folder, "site_", i)
#
#   setwd(userpath) #working directory
#
#   forcings <- Bream_pop_dataloader(userpath) #load environmental variables
#
#   output <- Bream_pop_main(userpath, forcings)} #run growth model
#
# lapply(sites, pre_rac)
for (i in sites){
userpath <- paste0(rac_folder, "site_", i)
setwd(userpath) #working directory
forcings <- Bream_pop_dataloader(userpath) #load environmental variables
output <- Bream_pop_main(userpath, forcings)} #run growth model
# library("foreach")
# library("doParallel")
#
# cl <- makeCluster(2) # create a cluster with 2 cores
# registerDoParallel(cl) # register the cluster
#
# res = foreach(i = sites) %dopar% {
#   library(RAC)
#
#   userpath <- paste0(rac_folder, "site_", i)
#
#   setwd(userpath) #working directory
#
#   forcings <- Bream_pop_dataloader(userpath) #load environmental variables
#
#   output <- Bream_pop_main(userpath, forcings)} #run growth model
#
# stopCluster(cl) # shut down the cluster
#generate final feeding tables
feeding <- function(rac_folder, i){
site_folder <- paste0('site_', i, '/Bream_population/Outputs/Out_csv/')
ingestion <- read.csv(paste0(rac_folder, site_folder, 'actual_ingestion.csv'), header=TRUE, sep=",")
ingestion <- ingestion %>% select(V1)
compiled <- cbind(date, ingestion)
name <- paste0(rac_folder, 'feeding_files/site_', i, '_feeding.csv')
write.table(compiled, file = name, row.names=FALSE, col.names = TRUE, sep=",")}
date <- feeding_prep %>% select(date)
date <- date$date[1:547]
for (i in sites){
feeding(rac_folder, i)}
#load data for final model run
#generate Population.csv for each site
for (i in sites){
for (j in 0:(length(sites)-1)){
column <- j + 5
export <- population %>% select(1, 2, column, 3, 4)}
output <- paste0(rac_folder, 'site_', i, '/Bream_population/Inputs/Parameters/Population.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Parameters.csv for each site
for (i in sites){
export <- parameters %>% select(1, 2, 6, 3, 4) #6 final parameters
output <- paste0(rac_folder, 'site_', i, '/Bream_population/Inputs/Parameters/Parameters.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Feeding.csv for each site
for (i in sites){
feed <- read.csv(paste0(rac_folder, 'feeding_files/site_', i, '_feeding.csv'))
output <- paste0(rac_folder, 'site_', i, '/Bream_population/Inputs/Forcings/Feeding.csv')
write.table(feed, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
for (i in sites){
userpath <- paste0(rac_folder, "site_", i)
setwd(userpath) #working directory
forcings <- Bream_pop_dataloader(userpath) #load environmental variables
output <- Bream_pop_main(userpath, forcings)} #run growth model
library(dplyr)
library(raster)
library(sf)
#parallel processing - http://pablobarbera.com/ECPR-SC105/code/02-parallel-computing.html
library(foreach)
library(doParallel)
library(ggplot2)
library(scales)
#function to crop raster to area of interest, converts raster to point
crop_tool <- function(image_file, target){
raster_crop <- crop(raster(image_file), target) #opens raster file, clips raster to target (target is opened in a prior step)
pts <- rasterToPoints(raster_crop) #raster clip is convereted to a point
pts_df <- as.data.frame(pts) #points converted to a df
mean(pts_df[,3])} #mean calculated to result in just one measurement
#extract sst from all rasters and add sst value to csv
sst_tool <- function(tif_folder, target, csv_output){
sst_list <- list.files(tif_folder, pattern = '.tif')
daily_sst = list() #365 tif files per year/folder
date = list()
library(raster) #added for parallel processing
#for (i in 1:2){
for (i in 1:(length(sst_list))){
file <- paste0(tif_folder, sst_list[i])
sst <- crop_tool(file, target)
daily_sst[[i]] <- sst
day <- substr(sst_list[i], 17, 18)
month <- substr(sst_list[i], 15, 16)
year <- substr(sst_list[i], 11, 14)
date[[i]] <- paste0(day, "/", month, "/", year)}
daily_sst = do.call(rbind, daily_sst)
date = data.frame(do.call(rbind, date))
#rename columns
colnames(daily_sst) <- c("c")
colnames(date) <- c("date")
#convert kelvin to celcius
daily_sst <- daily_sst - 273.15
#add date
daily_sst <- cbind(date, daily_sst)
#create output filename and export as csv
target_df <- as.data.frame(target)
output <- paste0(csv_output, paste0(target_df['farm_id']), '_sst.csv')
write.table(daily_sst, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#load shapefile of farm sites
targets <- '/Users/Zack/0_greece/blue_bridge/fishcages_Greece_farm_pts_500m_sq_2.shp'
targets <- st_read(targets)
targets[1,]
#process SST for all farm sites - 2019
#load sst data
tif_folder <- '/Users/Zack/0_thesis_sst/ghrsst_2019_tif/'
#output folder
csv_output <- '/Users/Zack/0_thesis_sst/ghrsst_2019_csv/'
#single use
sst_tool(tif_folder, targets[1,], csv_output)
sst_tool(tif_folder, targets[2,], csv_output)
sst_tool(tif_folder, targets[3,], csv_output)
library(dplyr)
library(raster)
library(sf)
#parallel processing - http://pablobarbera.com/ECPR-SC105/code/02-parallel-computing.html
library(foreach)
library(doParallel)
library(ggplot2)
library(scales)
#function to crop raster to area of interest, converts raster to point
crop_tool <- function(image_file, target){
raster_crop <- crop(raster(image_file), target) #opens raster file, clips raster to target (target is opened in a prior step)
pts <- rasterToPoints(raster_crop) #raster clip is convereted to a point
pts_df <- as.data.frame(pts) #points converted to a df
mean(pts_df[,3])} #mean calculated to result in just one measurement
#extract sst from all rasters and add sst value to csv
sst_tool <- function(tif_folder, target, csv_output){
sst_list <- list.files(tif_folder, pattern = '.tif')
daily_sst = list() #365 tif files per year/folder
date = list()
library(raster) #added for parallel processing
#for (i in 1:2){
for (i in 1:(length(sst_list))){
file <- paste0(tif_folder, sst_list[i])
sst <- crop_tool(file, target)
daily_sst[[i]] <- sst
day <- substr(sst_list[i], 17, 18)
month <- substr(sst_list[i], 15, 16)
year <- substr(sst_list[i], 11, 14)
date[[i]] <- paste0(day, "/", month, "/", year)}
daily_sst = do.call(rbind, daily_sst)
date = data.frame(do.call(rbind, date))
#rename columns
colnames(daily_sst) <- c("c")
colnames(date) <- c("date")
#convert kelvin to celcius
daily_sst <- daily_sst - 273.15
#add date
daily_sst <- cbind(date, daily_sst)
#create output filename and export as csv
target_df <- as.data.frame(target)
output <- paste0(csv_output, paste0(target_df['farm_id']), '_sst.csv')
write.table(daily_sst, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#load shapefile of farm sites
targets <- '/Users/Zack/0_greece/blue_bridge/fishcages_Greece_farm_pts_500m_sq_2.shp'
targets <- st_read(targets)
#process SST for all farm sites - 2018
#load sst data
tif_folder <- '/Users/Zack/0_thesis_sst/ghrsst_2018_tif/'
#output folder
csv_output <- '/Users/Zack/0_thesis_sst/ghrsst_2018_csv/'
#select numbrer of cores
myCluster <- makeCluster(4, type = "PSOCK")
#activate clusters
registerDoParallel(myCluster)
#parallel process
foreach(i = 0:nrow(as.data.frame(targets))) %dopar% sst_tool(tif_folder, targets[i,], csv_output)
