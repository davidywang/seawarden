date[[i]] <- paste0(day, "/", month, "/", year)}
daily_v = do.call(rbind, daily_v)
daily_u = do.call(rbind, daily_u)
date = data.frame(do.call(rbind, date))
#daily_v <- as.data.frame(daily_v)
#daily_u <- as.data.frame(daily_u)
#colnames(date) <- c("date")
#colnames(daily_v) <- c("v")
#colnames(daily_u) <- c("u")
#combine
daily <- cbind(date, uv2ds(u=daily_u, v=daily_v))
#daily <- cbind(date, daily_v, daily_u)
#rename columns
daily <- daily %>% rename(date=1, dir=2, speed=3)
#create output filename and export as csv
df <-as.data.frame(target)
filename <- paste0(output, paste0(df['farm_id']), '_medsea_current.csv')
#create output file
#write.csv(daily, file=filename, row.names = FALSE)}
write.table(daily, file = filename, row.names=FALSE, col.names = TRUE, sep=",")}
#single use
#current_tool(v_folder_18, u_folder_18, targets[1,], output_18)
#loop to create u, v, direction and speed csv for all farm sites
for (i in sites){current_tool(v_folder_18, u_folder_18, targets[i,], output_18)}
#load shapefile of farm sites
targets <- '/Users/Zack/0_greece/blue_bridge/farm_pts_500m_sq_current.shp'
targets <- st_read(targets)
sites <- 1:nrow(as.data.frame(targets))
#single use
#current_tool(v_folder_18, u_folder_18, targets[1,], output_18)
#loop to create u, v, direction and speed csv for all farm sites
for (i in sites){current_tool(v_folder_18, u_folder_18, targets[i,], output_18)}
for (i in sites){current_tool(v_folder_19, u_folder_19, targets[i,], output_19)}
daily_u[[i]] <- u
current_tool <- function(v_folder, u_folder, target, output){
#added here for parallel processing
library(raster)
library(rWind)
#list of tif files in folder
v_list <- list.files(v_folder, pattern = '.tif')
u_list <- list.files(u_folder, pattern = '.tif')
daily_u = list()
daily_v = list()
date = list()
for (i in 1:10){
#for (i in 1:length(v_list)){
v_file <- paste0(v_folder, v_list[i])
u_file <- paste0(u_folder, u_list[i])
v <- crop_tool(v_file, target)
u <- crop_tool(u_file, target)
daily_u[[i]] <- u
daily_v[[i]] <- v
day <- substr(u_list[i], 19, 20)
month <- substr(u_list[i], 16, 17)
year <- substr(u_list[i], 11, 14)
date[[i]] <- paste0(day, "/", month, "/", year)}
daily_v = do.call(rbind, daily_v)
daily_u = do.call(rbind, daily_u)
date = data.frame(do.call(rbind, date))
#daily_v <- as.data.frame(daily_v)
#daily_u <- as.data.frame(daily_u)
#colnames(date) <- c("date")
#colnames(daily_v) <- c("v")
#colnames(daily_u) <- c("u")
#combine
daily <- cbind(date, uv2ds(u=daily_u, v=daily_v))
#daily <- cbind(date, daily_v, daily_u)
#rename columns
daily <- daily %>% rename(date=1, dir=2, speed=3)
#create output filename and export as csv
df <-as.data.frame(target)
filename <- paste0(output, paste0(df['farm_id']), '_medsea_current.csv')
#create output file
#write.csv(daily, file=filename, row.names = FALSE)}
write.table(daily, file = filename, row.names=FALSE, col.names = TRUE, sep=",")}
#single use
#current_tool(v_folder_18, u_folder_18, targets[1,], output_18)
#loop to create u, v, direction and speed csv for all farm sites
for (i in sites){current_tool(v_folder_18, u_folder_18, targets[i,], output_18)}
sites
targets
(as.data.frame(targets))
sites[21:30]
sites<-sites[21:50]
#single use
#current_tool(v_folder_18, u_folder_18, targets[1,], output_18)
sites<-sites[21:50]
#loop to create u, v, direction and speed csv for all farm sites
for (i in sites){current_tool(v_folder_18, u_folder_18, targets[i,], output_18)}
sites
sites
#load shapefile of farm sites
targets <- '/Users/Zack/0_greece/blue_bridge/farm_pts_500m_sq_current.shp'
targets <- st_read(targets)
sites <- 1:nrow(as.data.frame(targets))
#load shapefile of farm sites
targets <- '/Users/Zack/0_greece/blue_bridge/farm_pts_500m_sq_current.shp'
targets <- st_read(targets)
sites <- 1:nrow(as.data.frame(targets))
length(sites)
library(dplyr)
#combine RAC predictions for each farmsite in to one csv file
compiler <- function(rac_folder, site_folder, i){
filepath <- paste0(rac_folder, 'site_', i, site_folder)
#load csv files
faeces_c <- read.csv(paste0(filepath, 'faeces_production_Carbohydrates.csv'), header=TRUE, sep=",")
faeces_l <- read.csv(paste0(filepath, 'faeces_production_Lipids.csv'), header=TRUE, sep=",")
faeces_p <- read.csv(paste0(filepath, 'faeces_production_Proteins.csv'), header=TRUE, sep=",")
feed_c <- read.csv(paste0(filepath, 'wasted_feed_Carbohydrates.csv'), header=TRUE, sep=",")
feed_l <- read.csv(paste0(filepath, 'wasted_feed_Lipids.csv'), header=TRUE, sep=",")
feed_p <- read.csv(paste0(filepath, 'wasted_feed_Proteins.csv'), header=TRUE, sep=",")
nh4 <- read.csv(paste0(filepath, 'NH4_release.csv'), header=TRUE, sep=",")
weight <- read.csv(paste0(filepath, 'weight.csv'), header=TRUE, sep=",")
#extract columns
faeces_c <- faeces_c %>% select(X, V1, V2)
faeces_l <- faeces_l %>% select(V1, V2)
faeces_p <- faeces_p %>% select(V1, V2)
feed_c <- feed_c %>% select(V1, V2)
feed_l <- feed_l %>% select(V1, V2)
feed_p <- feed_p %>% select(V1, V2)
nh4 <- nh4 %>% select(V1, V2)
weight <- weight %>% select(V1, V2) %>% slice(1:543)
#compile columns to new dataframe
compiled <- cbind(faeces_c, faeces_l, faeces_p, feed_c, feed_l, feed_p, nh4, weight)
#rename columns
colnames(compiled) <- c("day", "faeces_c1", "faeces_c2", "faeces_l1", "faeces_l2", "faeces_p1", "faeces_p2",
"feed_c1", "feed_c2", "feed_l1", "feed_l2", "feed_p1", "feed_p2",
"nh4_1", "nh4_2", "weight_1", "weight_2")
#write csv
name <- paste0(rac_folder, 'output_files/site_', i, '_compiled.csv')
write.table(compiled, file = name, row.names=FALSE, col.names = TRUE, sep=",")}
sites <- list(23, 71, 92, 165, 172, 219)
rac_folder <- '/Users/Zack/0_seawarden/r_rac/rac_seabass/'
site_folder <- '/Bass_population/Outputs/Out_csv/'
for (i in sites){
compiler(rac_folder, site_folder, i)}
#rename columns
colnames(compiled) <- c("day", "faeces_c1", "faeces_c2", "faeces_l1", "faeces_l2", "faeces_p1", "faeces_p2",
"feed_c1", "feed_c2", "feed_l1", "feed_l2", "feed_p1", "feed_p2",
"nh4_1", "nh4_2", "weight_1", "weight_2")
library(dplyr)
#combine RAC predictions for each farmsite in to one csv file
compiler <- function(rac_folder, site_folder, i){
filepath <- paste0(rac_folder, 'site_', i, site_folder)
#load csv files
faeces_c <- read.csv(paste0(filepath, 'faeces_production_Carbohydrates.csv'), header=TRUE, sep=",")
faeces_l <- read.csv(paste0(filepath, 'faeces_production_Lipids.csv'), header=TRUE, sep=",")
faeces_p <- read.csv(paste0(filepath, 'faeces_production_Proteins.csv'), header=TRUE, sep=",")
feed_c <- read.csv(paste0(filepath, 'wasted_feed_Carbohydrates.csv'), header=TRUE, sep=",")
feed_l <- read.csv(paste0(filepath, 'wasted_feed_Lipids.csv'), header=TRUE, sep=",")
feed_p <- read.csv(paste0(filepath, 'wasted_feed_Proteins.csv'), header=TRUE, sep=",")
nh4 <- read.csv(paste0(filepath, 'NH4_release.csv'), header=TRUE, sep=",")
weight <- read.csv(paste0(filepath, 'weight.csv'), header=TRUE, sep=",")
#extract columns
faeces_c <- faeces_c %>% select(X, V1, V2)
faeces_l <- faeces_l %>% select(V1, V2)
faeces_p <- faeces_p %>% select(V1, V2)
feed_c <- feed_c %>% select(V1, V2)
feed_l <- feed_l %>% select(V1, V2)
feed_p <- feed_p %>% select(V1, V2)
nh4 <- nh4 %>% select(V1, V2)
weight <- weight %>% select(V1, V2) %>% slice(1:605) #543)
#compile columns to new dataframe
compiled <- cbind(faeces_c, faeces_l, faeces_p, feed_c, feed_l, feed_p, nh4, weight)
#rename columns
colnames(compiled) <- c("day", "faeces_c1", "faeces_c2", "faeces_l1", "faeces_l2", "faeces_p1", "faeces_p2",
"feed_c1", "feed_c2", "feed_l1", "feed_l2", "feed_p1", "feed_p2",
"nh4_1", "nh4_2", "weight_1", "weight_2")
#write csv
name <- paste0(rac_folder, 'output_files/site_', i, '_compiled.csv')
write.table(compiled, file = name, row.names=FALSE, col.names = TRUE, sep=",")}
sites <- list(23, 71, 92, 165, 172, 219)
rac_folder <- '/Users/Zack/0_seawarden/r_rac/rac_seabass/'
site_folder <- '/Bass_population/Outputs/Out_csv/'
for (i in sites){
compiler(rac_folder, site_folder, i)}
library(dplyr)
#combine RAC predictions for each farmsite in to one csv file
compiler <- function(rac_folder, site_folder, i){
filepath <- paste0(rac_folder, 'site_', i, site_folder)
#load csv files
faeces_c <- read.csv(paste0(filepath, 'faeces_production_Carbohydrates.csv'), header=TRUE, sep=",")
faeces_l <- read.csv(paste0(filepath, 'faeces_production_Lipids.csv'), header=TRUE, sep=",")
faeces_p <- read.csv(paste0(filepath, 'faeces_production_Proteins.csv'), header=TRUE, sep=",")
feed_c <- read.csv(paste0(filepath, 'wasted_feed_Carbohydrates.csv'), header=TRUE, sep=",")
feed_l <- read.csv(paste0(filepath, 'wasted_feed_Lipids.csv'), header=TRUE, sep=",")
feed_p <- read.csv(paste0(filepath, 'wasted_feed_Proteins.csv'), header=TRUE, sep=",")
nh4 <- read.csv(paste0(filepath, 'NH4_release.csv'), header=TRUE, sep=",")
weight <- read.csv(paste0(filepath, 'weight.csv'), header=TRUE, sep=",")
#extract columns
faeces_c <- faeces_c %>% select(X, V1, V2)
faeces_l <- faeces_l %>% select(V1, V2)
faeces_p <- faeces_p %>% select(V1, V2)
feed_c <- feed_c %>% select(V1, V2)
feed_l <- feed_l %>% select(V1, V2)
feed_p <- feed_p %>% select(V1, V2)
nh4 <- nh4 %>% select(V1, V2)
weight <- weight %>% select(V1, V2) %>% slice(1:609) #543)
#compile columns to new dataframe
compiled <- cbind(faeces_c, faeces_l, faeces_p, feed_c, feed_l, feed_p, nh4, weight)
#rename columns
colnames(compiled) <- c("day", "faeces_c1", "faeces_c2", "faeces_l1", "faeces_l2", "faeces_p1", "faeces_p2",
"feed_c1", "feed_c2", "feed_l1", "feed_l2", "feed_p1", "feed_p2",
"nh4_1", "nh4_2", "weight_1", "weight_2")
#write csv
name <- paste0(rac_folder, 'output_files/site_', i, '_compiled.csv')
write.table(compiled, file = name, row.names=FALSE, col.names = TRUE, sep=",")}
sites <- list(23, 71, 92, 165, 172, 219)
rac_folder <- '/Users/Zack/0_seawarden/r_rac/rac_seabass/'
site_folder <- '/Bass_population/Outputs/Out_csv/'
for (i in sites){
compiler(rac_folder, site_folder, i)}
faeces_c
rac_folder <- '/Users/Zack/0_seawarden/r_rac/rac_seabass/'
site_folder <- '/Bass_population/Outputs/Out_csv/'
filepath <- paste0(rac_folder, 'site_', i, site_folder)
faeces_c <- read.csv(paste0(filepath, 'faeces_production_Carbohydrates.csv'), header=TRUE, sep=",")
faeces_c
nrows(faeces_c)
nrow(faeces_c)
library(dplyr)
#combine RAC predictions for each farmsite in to one csv file
compiler <- function(rac_folder, site_folder, i){
filepath <- paste0(rac_folder, 'site_', i, site_folder)
#load csv files
faeces_c <- read.csv(paste0(filepath, 'faeces_production_Carbohydrates.csv'), header=TRUE, sep=",")
faeces_l <- read.csv(paste0(filepath, 'faeces_production_Lipids.csv'), header=TRUE, sep=",")
faeces_p <- read.csv(paste0(filepath, 'faeces_production_Proteins.csv'), header=TRUE, sep=",")
feed_c <- read.csv(paste0(filepath, 'wasted_feed_Carbohydrates.csv'), header=TRUE, sep=",")
feed_l <- read.csv(paste0(filepath, 'wasted_feed_Lipids.csv'), header=TRUE, sep=",")
feed_p <- read.csv(paste0(filepath, 'wasted_feed_Proteins.csv'), header=TRUE, sep=",")
nh4 <- read.csv(paste0(filepath, 'NH4_release.csv'), header=TRUE, sep=",")
weight <- read.csv(paste0(filepath, 'weight.csv'), header=TRUE, sep=",")
#extract columns
faeces_c <- faeces_c %>% select(X, V1, V2)
faeces_l <- faeces_l %>% select(V1, V2)
faeces_p <- faeces_p %>% select(V1, V2)
feed_c <- feed_c %>% select(V1, V2)
feed_l <- feed_l %>% select(V1, V2)
feed_p <- feed_p %>% select(V1, V2)
nh4 <- nh4 %>% select(V1, V2)
weight <- weight %>% select(V1, V2) %>% slice(1:nrow(faeces_c))
#compile columns to new dataframe
compiled <- cbind(faeces_c, faeces_l, faeces_p, feed_c, feed_l, feed_p, nh4, weight)
#rename columns
colnames(compiled) <- c("day", "faeces_c1", "faeces_c2", "faeces_l1", "faeces_l2", "faeces_p1", "faeces_p2",
"feed_c1", "feed_c2", "feed_l1", "feed_l2", "feed_p1", "feed_p2",
"nh4_1", "nh4_2", "weight_1", "weight_2")
#write csv
name <- paste0(rac_folder, 'output_files/site_', i, '_compiled.csv')
write.table(compiled, file = name, row.names=FALSE, col.names = TRUE, sep=",")}
sites <- list(23, 71, 92, 165, 172, 219)
rac_folder <- '/Users/Zack/0_seawarden/r_rac/rac_seabass/'
site_folder <- '/Bass_population/Outputs/Out_csv/'
for (i in sites){
compiler(rac_folder, site_folder, i)}
rac_folder <- '/Users/Zack/0_seawarden/r_rac/rac_bream/'
site_folder <- '/Bream_population/Outputs/Out_csv/'
for (i in sites){
compiler(rac_folder, site_folder, i)}
library(dplyr)
library(raster)
library(sf)
#parallel processing - http://pablobarbera.com/ECPR-SC105/code/02-parallel-computing.html
library(foreach)
library(doParallel)
library(ggplot2)
library(scales)
#plot function
plot_tool <- function(plot_csv_folder, plot_csv_list, plot_folder){
#create file path to csv
filepath <- paste0(plot_csv_folder, plot_csv_list)
#open csv
csv <- read.delim(file=filepath, sep = ',', stringsAsFactors = F, header = FALSE)
name <- unlist(strsplit(plot_csv_list, "_"))[1]
output <- paste0(plot_folder, name,'.png')
#change date format
csv$date <- as.Date(as.Date(csv$V1, format = "%d/%m/%Y"), "%Y-%m-%d")
#plot title
title <- paste("Sea Surface Temperature: Farm Site", name)
p <- ggplot(csv, aes(x=date, y = V2, group = 1))+
geom_line(color = "#00AFBB", size = .5)+
scale_x_date(labels = date_format("%Y-%m-%d"))+
labs(x = "Date", y = "Celcius", title = title)+
theme_minimal()+
theme(plot.title = element_text(lineheight=.8, face="bold", size = 12)) +
theme(text = element_text(size=10))
#expand_limits(y = 0)
scale_y_continuous(breaks=seq(0,0,2))
ggsave(file=output, plot=p, width=10, height=8)
p}
#generate plot for all sites
#input csv files
plot_csv_folder <- folder_3
#output folder
plot_folder <- '/Users/Zack/0_thesis_sst/ghrsst_plots/'
#create list of csv files
plot_csv_list <- list.files(plot_csv_folder)
#generate one plot
#plot_tool(plot_csv_folder, plot_csv_list[3], plot_folder)
#loop to plot SST for all farm sites
for (i in 1:(length(plot_csv_list))){
plot_tool(plot_csv_folder, plot_csv_list[i], plot_folder)}
#plot sst
csv <- read.delim('/Users/Zack/0_thesis_sst/ghrsst_csv/172_sst.csv', sep = ',', stringsAsFactors = F, header = FALSE)
#change date format
csv$date <- as.Date(as.Date(csv$V1, format = "%d/%m/%Y"), "%Y-%m-%d")
ggplot(csv, aes(x=date, y = V2, group = 1))+
geom_line(color = "#00AFBB", size = .5)+
scale_x_date(labels = date_format("%Y-%m-%d"))+
labs(x = "Date", y = "Celcius", title = "Sea Surface Temperature")+
theme_minimal()+
theme(plot.title = element_text(lineheight=.8, face="bold", size = 12)) +
theme(text = element_text(size=10))
ggsave(file="test.png", plot=last_plot(), width=10, height=8)
#generate plot for all sites
#input csv files
plot_csv_folder <- folder_3
#output folder
plot_folder <- '/Users/Zack/0_thesis_sst/ghrsst_plots/'
#create list of csv files
plot_csv_list <- list.files(plot_csv_folder)
#generate one plot
#plot_tool(plot_csv_folder, plot_csv_list[3], plot_folder)
#loop to plot SST for all farm sites
for (i in 1:(length(plot_csv_list))){
plot_tool(plot_csv_folder, plot_csv_list[i], plot_folder)}
#plot sst
csv <- read.delim('/Users/Zack/0_thesis_sst/ghrsst_csv/23_sst.csv', sep = ',', stringsAsFactors = F, header = FALSE)
#change date format
csv$date <- as.Date(as.Date(csv$V1, format = "%d/%m/%Y"), "%Y-%m-%d")
ggplot(csv, aes(x=date, y = V2, group = 1))+
geom_line(color = "#00AFBB", size = .5)+
scale_x_date(labels = date_format("%Y-%m-%d"))+
labs(x = "Date", y = "Celcius", title = "Sea Surface Temperature")+
theme_minimal()+
theme(plot.title = element_text(lineheight=.8, face="bold", size = 12)) +
theme(text = element_text(size=10))
ggsave(file="23.png", plot=last_plot(), width=10, height=8)
folder_3
folder_3 <- '/Users/Zack/0_thesis_sst/ghrsst_csv/'
#plot function
plot_tool <- function(plot_csv_folder, plot_csv_list, plot_folder){
#create file path to csv
filepath <- paste0(plot_csv_folder, plot_csv_list)
#open csv
csv <- read.delim(file=filepath, sep = ',', stringsAsFactors = F, header = FALSE)
name <- unlist(strsplit(plot_csv_list, "_"))[1]
output <- paste0(plot_folder, name,'.png')
#change date format
csv$date <- as.Date(as.Date(csv$V1, format = "%d/%m/%Y"), "%Y-%m-%d")
#plot title
title <- paste("Sea Surface Temperature: Farm Site", name)
p <- ggplot(csv, aes(x=date, y = V2, group = 1))+
geom_line(color = "#00AFBB", size = .5)+
scale_x_date(labels = date_format("%Y-%m-%d"))+
labs(x = "Date", y = "Celcius", title = title)+
theme_minimal()+
theme(plot.title = element_text(lineheight=.8, face="bold", size = 12)) +
theme(text = element_text(size=10))
#expand_limits(y = 0)
scale_y_continuous(breaks=seq(0,0,2))
ggsave(file=output, plot=p, width=10, height=8)
p}
#generate plot for all sites
#input csv files
plot_csv_folder <- folder_3
#output folder
plot_folder <- '/Users/Zack/0_thesis_sst/ghrsst_plots/'
#create list of csv files
plot_csv_list <- list.files(plot_csv_folder)
#generate one plot
#plot_tool(plot_csv_folder, plot_csv_list[3], plot_folder)
#loop to plot SST for all farm sites
for (i in 1:(length(plot_csv_list))){
plot_tool(plot_csv_folder, plot_csv_list[i], plot_folder)}
library(dplyr)
library(plyr)
library(tidyverse)
library(ggplot2)
#download UNFAO data as zipfile and unzip
#url <- "http://www.fao.org/fishery/static/Data/Aquaculture_2018.1.2.zip"
url <- "http://www.fao.org/fishery/static/Data/Aquaculture_2019.1.0.zip"
temp <- tempfile()
temp2 <- tempfile()
download.file(url, temp)
unzip(zipfile = temp, exdir = temp2)
#create dataframes from CSVs
aquaculture <- read_csv(file.path(temp2, "TS_FI_AQUACULTURE.csv"))
environment <- read_csv(file.path(temp2, "CL_FI_ENVIRONMENT.csv"))
country <- read_csv(file.path(temp2, "CL_FI_COUNTRY_GROUPS.csv"))
units <- read_csv(file.path(temp2, "CL_FI_UNIT.csv"))
species <- read_csv(file.path(temp2, "CL_FI_SPECIES_GROUPS.csv"))
#select specific columns for certain CSVs
environment <- environment %>%
dplyr::select(Identifier, Name_En)
country <- country %>%
dplyr::select(UN_Code, ISO3_Code, Name_En)
units <- units %>%
dplyr::select(Code, Name_En)
species <- species %>%
dplyr::select("3Alpha_Code", Major_Group, Name_En)
#join tables together to create dataframe that can be filtered by: year (2016), enviornment (Marine), and species group (PISCES)
aquaculture_all <- aquaculture %>%
left_join(environment, by = c("ENVIRONMENT" = "Identifier")) %>%
left_join(species, by = c("SPECIES"= "3Alpha_Code")) %>%
left_join(country, by = c("COUNTRY" = "UN_Code")) %>%
dplyr::rename("ENVIRONMENT_NAME" = "Name_En.x",
"SPECIES_NAME" = "Name_En.y",
"COUNTRY_NAME" = "Name_En",
"TONNES" = "QUANTITY",
"GROUP" = "Major_Group") %>%
dplyr::select(-ENVIRONMENT, -COUNTRY, -SPECIES, -QUANTITY_UNIT, -QUANTITY_SYMBOL, -VALUE_SYMBOL) %>%
dplyr::select(COUNTRY_NAME, ENVIRONMENT_NAME, GROUP, SPECIES_NAME, TONNES, YEAR) %>%
mutate(TONNES = round(TONNES, 1))
filter(ENVIRONMENT_NAME == "Marine", GROUP == "PISCES", COUNTRY_NAME == "Croatia") %>% #all years
#filter(ENVIRONMENT_NAME == "Marine", SPECIES_NAME =="European seabass", COUNTRY_NAME == "Greece") %>% #all years
#filter(ENVIRONMENT_NAME == "Marine", GROUP == "PLANTAE AQUATICAE", YEAR == 2017) %>% #seaweed
dplyr::select(-ENVIRONMENT, -COUNTRY, -SPECIES, -QUANTITY_UNIT, -QUANTITY_SYMBOL, -VALUE_SYMBOL) %>%
dplyr::select(COUNTRY_NAME, ENVIRONMENT_NAME, GROUP, SPECIES_NAME, TONNES, YEAR) %>%
mutate(TONNES = round(TONNES, 1))
aquaculture_all
filter(ENVIRONMENT_NAME == "Marine", GROUP == "PISCES", COUNTRY_NAME == "Republic of Croatia") %>% #all years
#filter(ENVIRONMENT_NAME == "Marine", SPECIES_NAME =="European seabass", COUNTRY_NAME == "Greece") %>% #all years
#filter(ENVIRONMENT_NAME == "Marine", GROUP == "PLANTAE AQUATICAE", YEAR == 2017) %>% #seaweed
dplyr::select(-ENVIRONMENT, -COUNTRY, -SPECIES, -QUANTITY_UNIT, -QUANTITY_SYMBOL, -VALUE_SYMBOL) %>%
dplyr::select(COUNTRY_NAME, ENVIRONMENT_NAME, GROUP, SPECIES_NAME, TONNES, YEAR) %>%
mutate(TONNES = round(TONNES, 1))
country
filter(ENVIRONMENT_NAME == "Marine", GROUP == "PISCES", COUNTRY_NAME == "Croatia") %>% #all years
#filter(ENVIRONMENT_NAME == "Marine", SPECIES_NAME =="European seabass", COUNTRY_NAME == "Greece") %>% #all years
#filter(ENVIRONMENT_NAME == "Marine", GROUP == "PLANTAE AQUATICAE", YEAR == 2017) %>% #seaweed
dplyr::select(-ENVIRONMENT, -COUNTRY, -SPECIES, -QUANTITY_UNIT, -QUANTITY_SYMBOL, -VALUE_SYMBOL) %>%
dplyr::select(COUNTRY_NAME, ENVIRONMENT_NAME, GROUP, SPECIES_NAME, TONNES, YEAR) %>%
mutate(TONNES = round(TONNES, 1))
#join tables together to create dataframe that can be filtered by: year (2016), enviornment (Marine), and species group (PISCES)
aquaculture_all <- aquaculture %>%
left_join(environment, by = c("ENVIRONMENT" = "Identifier")) %>%
left_join(species, by = c("SPECIES"= "3Alpha_Code")) %>%
left_join(country, by = c("COUNTRY" = "UN_Code")) %>%
dplyr::rename("ENVIRONMENT_NAME" = "Name_En.x",
"SPECIES_NAME" = "Name_En.y",
"COUNTRY_NAME" = "Name_En",
"TONNES" = "QUANTITY",
"GROUP" = "Major_Group") %>%
dplyr::select(-ENVIRONMENT, -COUNTRY, -SPECIES, -QUANTITY_UNIT, -QUANTITY_SYMBOL, -VALUE_SYMBOL) %>%
dplyr::select(COUNTRY_NAME, ENVIRONMENT_NAME, GROUP, SPECIES_NAME, TONNES, YEAR) %>%
mutate(TONNES = round(TONNES, 1))
filter(ENVIRONMENT_NAME == "Marine", GROUP == "PISCES", COUNTRY_NAME == "Croatia") %>% #all years
#filter(ENVIRONMENT_NAME == "Marine", SPECIES_NAME =="European seabass", COUNTRY_NAME == "Greece") %>% #all years
#filter(ENVIRONMENT_NAME == "Marine", GROUP == "PLANTAE AQUATICAE", YEAR == 2017) %>% #seaweed
dplyr::select(-ENVIRONMENT, -COUNTRY, -SPECIES, -QUANTITY_UNIT, -QUANTITY_SYMBOL, -VALUE_SYMBOL) %>%
dplyr::select(COUNTRY_NAME, ENVIRONMENT_NAME, GROUP, SPECIES_NAME, TONNES, YEAR) %>%
mutate(TONNES = round(TONNES, 1))
#join tables together to create dataframe that can be filtered by: year (2016), enviornment (Marine), and species group (PISCES)
aquaculture_all <- aquaculture %>%
left_join(environment, by = c("ENVIRONMENT" = "Identifier")) %>%
left_join(species, by = c("SPECIES"= "3Alpha_Code")) %>%
left_join(country, by = c("COUNTRY" = "UN_Code")) %>%
dplyr::rename("ENVIRONMENT_NAME" = "Name_En.x",
"SPECIES_NAME" = "Name_En.y",
"COUNTRY_NAME" = "Name_En",
"TONNES" = "QUANTITY",
"GROUP" = "Major_Group") %>%
dplyr::select(-ENVIRONMENT, -COUNTRY, -SPECIES, -QUANTITY_UNIT, -QUANTITY_SYMBOL, -VALUE_SYMBOL) %>%
dplyr::select(COUNTRY_NAME, ENVIRONMENT_NAME, GROUP, SPECIES_NAME, TONNES, YEAR) %>%
mutate(TONNES = round(TONNES, 1))
filter(ENVIRONMENT_NAME == "Marine", GROUP == "PISCES", COUNTRY_NAME == "Greece") %>% #all years
#filter(ENVIRONMENT_NAME == "Marine", SPECIES_NAME =="European seabass", COUNTRY_NAME == "Greece") %>% #all years
#filter(ENVIRONMENT_NAME == "Marine", GROUP == "PLANTAE AQUATICAE", YEAR == 2017) %>% #seaweed
dplyr::select(-ENVIRONMENT, -COUNTRY, -SPECIES, -QUANTITY_UNIT, -QUANTITY_SYMBOL, -VALUE_SYMBOL) %>%
dplyr::select(COUNTRY_NAME, ENVIRONMENT_NAME, GROUP, SPECIES_NAME, TONNES, YEAR) %>%
mutate(TONNES = round(TONNES, 1))
aquaculture_all
#join tables together to create dataframe that can be filtered by: year (2016), enviornment (Marine), and species group (PISCES)
aquaculture_all <- aquaculture %>%
left_join(environment, by = c("ENVIRONMENT" = "Identifier")) %>%
left_join(species, by = c("SPECIES"= "3Alpha_Code")) %>%
left_join(country, by = c("COUNTRY" = "UN_Code")) %>%
dplyr::rename("ENVIRONMENT_NAME" = "Name_En.x",
"SPECIES_NAME" = "Name_En.y",
"COUNTRY_NAME" = "Name_En",
"TONNES" = "QUANTITY",
"GROUP" = "Major_Group") %>%
dplyr::select(-ENVIRONMENT, -COUNTRY, -SPECIES, -QUANTITY_UNIT, -QUANTITY_SYMBOL, -VALUE_SYMBOL) %>%
dplyr::select(COUNTRY_NAME, ENVIRONMENT_NAME, GROUP, SPECIES_NAME, TONNES, YEAR) %>%
mutate(TONNES = round(TONNES, 1))
filter(ENVIRONMENT_NAME == "Marine", GROUP == "PISCES", COUNTRY_NAME == "Greece") %>% #all years
#filter(ENVIRONMENT_NAME == "Marine", SPECIES_NAME =="European seabass", COUNTRY_NAME == "Greece") %>% #all years
#filter(ENVIRONMENT_NAME == "Marine", GROUP == "PLANTAE AQUATICAE", YEAR == 2017) %>% #seaweed
dplyr::select(-ENVIRONMENT, -COUNTRY, -SPECIES, -QUANTITY_UNIT, -QUANTITY_SYMBOL, -VALUE_SYMBOL) %>%
dplyr::select(COUNTRY_NAME, ENVIRONMENT_NAME, GROUP, SPECIES_NAME, TONNES, YEAR) %>%
mutate(TONNES = round(TONNES, 1))
#join tables together to create dataframe that can be filtered by: year (2016), enviornment (Marine), and species group (PISCES)
aquaculture_all <- aquaculture %>%
left_join(environment, by = c("ENVIRONMENT" = "Identifier")) %>%
left_join(species, by = c("SPECIES"= "3Alpha_Code")) %>%
left_join(country, by = c("COUNTRY" = "UN_Code")) %>%
dplyr::rename("ENVIRONMENT_NAME" = "Name_En.x",
"SPECIES_NAME" = "Name_En.y",
"COUNTRY_NAME" = "Name_En",
"TONNES" = "QUANTITY",
"GROUP" = "Major_Group") %>%
dplyr::select(-ENVIRONMENT, -COUNTRY, -SPECIES, -QUANTITY_UNIT, -QUANTITY_SYMBOL, -VALUE_SYMBOL) %>%
dplyr::select(COUNTRY_NAME, ENVIRONMENT_NAME, GROUP, SPECIES_NAME, TONNES, YEAR) %>%
mutate(TONNES = round(TONNES, 1))
filter(GROUP == "PISCES", COUNTRY_NAME == "Croatia") %>% #all years
#filter(ENVIRONMENT_NAME == "Marine", SPECIES_NAME =="European seabass", COUNTRY_NAME == "Greece") %>% #all years
#filter(ENVIRONMENT_NAME == "Marine", GROUP == "PLANTAE AQUATICAE", YEAR == 2017) %>% #seaweed
dplyr::select(-ENVIRONMENT, -COUNTRY, -SPECIES, -QUANTITY_UNIT, -QUANTITY_SYMBOL, -VALUE_SYMBOL) %>%
dplyr::select(COUNTRY_NAME, ENVIRONMENT_NAME, GROUP, SPECIES_NAME, TONNES, YEAR) %>%
mutate(TONNES = round(TONNES, 1))
