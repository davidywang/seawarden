library(MASS)
require(parallel)
numCores <- detectCores()
numCores
find.clusters(x, max.n.clust=4, parallel=FALSE)
library(parallel)
library(MASS)
require(parallel)
numCores <- detectCores()
numCores
mclapply(sites, pre_rac, mc.cores = 2)
#first model run to generate feeding tables (using lapply instead of a forloop)
#trace(Bream_pop_main,edit=T) #delete selector = "y"
pre_rac <- function(sites){
userpath <- paste0(rac_folder, "site_", i)
setwd(userpath) #working directory
forcings <- Bream_pop_dataloader(userpath) #load environmental variables
output <- Bream_pop_main(userpath, forcings)} #run growth model
lapply(sites, pre_rac)
detectCores()
makeCluster(getOption("cl.cores", 2))
makeCluster(getOption("cl.cores", 4))
makeCluster(getOption("cl.cores", 5))
library(parallel)
cl <- makeCluster(getOption("cl.cores", 4))
system.time(
parLapply(cl, sites, pre_rac(x) {
library(parallel)
cl <- makeCluster(getOption("cl.cores", 2))
system.time(
parLapply(cl, sites, pre_rac(x) {
library(parallel)
cl <- makeCluster(mc <- getOption("cl.cores", 4))
system.time(
parLapply(cl, sites, pre_rac(x) {
library(parallel)
cl <- makeCluster(mc <- getOption("cl.cores", 4))
parLapply(cl, sites, pre_rac(x) )
#first model run to generate feeding tables (using lapply instead of a forloop)
#trace(Bream_pop_main,edit=T) #delete selector = "y"
pre_rac <- function(sites){
userpath <- paste0(rac_folder, "site_", i)
setwd(userpath) #working directory
forcings <- Bream_pop_dataloader(userpath) #load environmental variables
output <- Bream_pop_main(userpath, forcings)} #run growth model
lapply(sites, pre_rac)
library(parallel)
cl <- makeCluster(mc <- getOption("cl.cores", 2))
parLapply(cl, sites, pre_rac(x) )
library(foreach)
foreach(i=sites) %dopar% {
userpath <- paste0(rac_folder, "site_", i)
setwd(userpath) #working directory
forcings <- Bream_pop_dataloader(userpath) #load environmental variables
output <- Bream_pop_main(userpath, forcings)
}
library(foreach)
library(doMC)
install.packages("doMC")
library(foreach)
package.install(doMC)
library(foreach)
install.packages("DoMC")
library(doMC)
library(foreach)
install.packages("DoMC")
library(DoMC)
library(foreach)
install.packages("doMC", repos="http://R-Forge.R-project.org")
library(DoMC)
library(foreach)
install.packages("doMC", repos="http://R-Forge.R-project.org")
library(doMC)
registerDoMC(4)
foreach(i=sites) %dopar% {
userpath <- paste0(rac_folder, "site_", i)
setwd(userpath) #working directory
forcings <- Bream_pop_dataloader(userpath) #load environmental variables
output <- Bream_pop_main(userpath, forcings)
}
detectCores()
library(doParallel)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores, type="FORK")
library(doParallel)
cl <- makeCluster(4)
registerDoParallel(cl)
foreach(i=sites) %dopar% {
userpath <- paste0(rac_folder, "site_", i)
setwd(userpath) #working directory
forcings <- Bream_pop_dataloader(userpath) #load environmental variables
output <- Bream_pop_main(userpath, forcings)
}
library(RAC)
library(dplyr)
#command + shift + c
#load sst files
sst_folder <- '/Users/Zack/0_thesis_sst/ghrsst_csv_test/'
sst_list <- list.files(sst_folder, pattern = '.csv')
#load master files
rac_folder <- "/Users/Zack/0_seawarden/r_rac/rac_bream/"
master_files <- paste0(rac_folder, 'master_files/master_RAC-bream - ')
#prep files to generate feeding tables
feeding_prep <- read.csv(paste0(master_files, 'Feeding_Prep.csv'), header=TRUE, sep=",")
population_prep <- read.csv(paste0(master_files, 'Population_Prep.csv'), header=FALSE, sep=",")
#files for final model run
population <- read.csv(paste0(master_files, 'Population.csv'), header=FALSE, sep=",")
parameters <- read.csv(paste0(master_files, 'Parameters.csv'), header=FALSE, sep=",")
#files for both steps
management <- read.csv(paste0(master_files, 'Management.csv'), header=FALSE, sep=",")
food <- read.csv(paste0(master_files, 'Food_Characterization.csv'), header=FALSE, sep=",")
sites <- list(23, 71, 92, 165, 172, 219) #study sites
#create folder for each site, #add SST data
for (i in sites){
#create a folder for each site
site_folder <- paste0(rac_folder, 'site_', i, '/')
dir.create(site_folder)
#create RAC folders for each site
Bream_pop_skeleton(site_folder)
#add SST data
orglocation <- paste0(sst_folder, i, '_sst.csv')
newlocation <- paste0(site_folder, 'Bream_population/Inputs/Forcings/')
file.copy(from=orglocation, to=newlocation, overwrite = TRUE, recursive = FALSE, copy.mode = TRUE)
file.remove(paste0(newlocation, 'Water_temperature.csv'))
file.rename(paste0(newlocation, i, '_sst.csv'), paste0(newlocation, 'Water_temperature.csv'))}
#load prep files for each site
#generate Population.csv for each site
for (i in sites){
for (j in 0:(length(sites)-1)){
column <- j + 5 #!
export <- population_prep %>% select(1, 2, column, 3, 4)}
output <- paste0(rac_folder, 'site_', i, '/Bream_population/Inputs/Parameters/Population.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
library(RAC)
library(dplyr)
#command + shift + c
#load sst files
sst_folder <- '/Users/Zack/0_thesis_sst/ghrsst_csv_test/'
sst_list <- list.files(sst_folder, pattern = '.csv')
#load master files
rac_folder <- "/Users/Zack/0_seawarden/r_rac/rac_bream/"
master_files <- paste0(rac_folder, 'master_files/master_RAC-bream - ')
#prep files to generate feeding tables
feeding_prep <- read.csv(paste0(master_files, 'Feeding_Prep.csv'), header=TRUE, sep=",")
population_prep <- read.csv(paste0(master_files, 'Population_Prep.csv'), header=FALSE, sep=",")
#files for final model run
population <- read.csv(paste0(master_files, 'Population.csv'), header=FALSE, sep=",")
parameters <- read.csv(paste0(master_files, 'Parameters.csv'), header=FALSE, sep=",")
#files for both steps
management <- read.csv(paste0(master_files, 'Management.csv'), header=FALSE, sep=",")
food <- read.csv(paste0(master_files, 'Food_Characterization.csv'), header=FALSE, sep=",")
sites <- list(23, 71, 92, 165, 172, 219) #study sites
#create folder for each site, #add SST data
for (i in sites){
#create a folder for each site
site_folder <- paste0(rac_folder, 'site_', i, '/')
dir.create(site_folder)
#create RAC folders for each site
Bream_pop_skeleton(site_folder)
#add SST data
orglocation <- paste0(sst_folder, i, '_sst.csv')
newlocation <- paste0(site_folder, 'Bream_population/Inputs/Forcings/')
file.copy(from=orglocation, to=newlocation, overwrite = TRUE, recursive = FALSE, copy.mode = TRUE)
file.remove(paste0(newlocation, 'Water_temperature.csv'))
file.rename(paste0(newlocation, i, '_sst.csv'), paste0(newlocation, 'Water_temperature.csv'))}
#load prep files for each site
#generate Population.csv for each site
for (i in sites){
for (j in 0:(length(sites)-1)){
column <- j + 5 #!
export <- population_prep %>% select(1, 2, column, 3, 4)}
output <- paste0(rac_folder, 'site_', i, '/Bream_population/Inputs/Parameters/Population.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Parameters.csv for each site
for (i in sites){
export <- parameters %>% select(1, 2, 5, 3, 4) #5 prep parameters
output <- paste0(rac_folder, 'site_', i, '/Bream_population/Inputs/Parameters/Parameters.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Feeding.csv for each site
for (i in sites){
output <- paste0(rac_folder, 'site_', i, '/Bream_population/Inputs/Forcings/Feeding.csv')
write.table(feeding_prep, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Management.csv for each site
for (i in sites){
export <- management %>% select(1, 2, 3)
output <- paste0(rac_folder, 'site_', i, '/Bream_population/Inputs/Population_management/Management.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Food_Characterization.csv for each site
for (i in sites){
export <- food %>% select(2, 1)
export <- export[-1,] #drop header
output <- paste0(rac_folder, 'site_', i, '/Bream_population/Inputs/Forcings/Food_Characterization.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#first model run to generate feeding tables (using lapply instead of a forloop)
#trace(Bream_pop_main,edit=T) #delete selector = "y"
pre_rac <- function(sites){
userpath <- paste0(rac_folder, "site_", i)
setwd(userpath) #working directory
forcings <- Bream_pop_dataloader(userpath) #load environmental variables
output <- Bream_pop_main(userpath, forcings)} #run growth model
lapply(sites, pre_rac)
library(RAC)
library(dplyr)
#command + shift + c
#load sst files
sst_folder <- '/Users/Zack/0_thesis_sst/ghrsst_csv_test/'
sst_list <- list.files(sst_folder, pattern = '.csv')
#load master files
rac_folder <- "/Users/Zack/0_seawarden/r_rac/rac_bream/"
master_files <- paste0(rac_folder, 'master_files/master_RAC-bream - ')
#prep files to generate feeding tables
feeding_prep <- read.csv(paste0(master_files, 'Feeding_Prep.csv'), header=TRUE, sep=",")
population_prep <- read.csv(paste0(master_files, 'Population_Prep.csv'), header=FALSE, sep=",")
#files for final model run
population <- read.csv(paste0(master_files, 'Population.csv'), header=FALSE, sep=",")
parameters <- read.csv(paste0(master_files, 'Parameters.csv'), header=FALSE, sep=",")
#files for both steps
management <- read.csv(paste0(master_files, 'Management.csv'), header=FALSE, sep=",")
food <- read.csv(paste0(master_files, 'Food_Characterization.csv'), header=FALSE, sep=",")
sites <- list(23, 71, 92, 165, 172, 219) #study sites
#create folder for each site, #add SST data
for (i in sites){
#create a folder for each site
site_folder <- paste0(rac_folder, 'site_', i, '/')
dir.create(site_folder)
#create RAC folders for each site
Bream_pop_skeleton(site_folder)
#add SST data
orglocation <- paste0(sst_folder, i, '_sst.csv')
newlocation <- paste0(site_folder, 'Bream_population/Inputs/Forcings/')
file.copy(from=orglocation, to=newlocation, overwrite = TRUE, recursive = FALSE, copy.mode = TRUE)
file.remove(paste0(newlocation, 'Water_temperature.csv'))
file.rename(paste0(newlocation, i, '_sst.csv'), paste0(newlocation, 'Water_temperature.csv'))}
#load prep files for each site
#generate Population.csv for each site
for (i in sites){
for (j in 0:(length(sites)-1)){
column <- j + 5 #!
export <- population_prep %>% select(1, 2, column, 3, 4)}
output <- paste0(rac_folder, 'site_', i, '/Bream_population/Inputs/Parameters/Population.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Parameters.csv for each site
for (i in sites){
export <- parameters %>% select(1, 2, 5, 3, 4) #5 prep parameters
output <- paste0(rac_folder, 'site_', i, '/Bream_population/Inputs/Parameters/Parameters.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Feeding.csv for each site
for (i in sites){
output <- paste0(rac_folder, 'site_', i, '/Bream_population/Inputs/Forcings/Feeding.csv')
write.table(feeding_prep, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Management.csv for each site
for (i in sites){
export <- management %>% select(1, 2, 3)
output <- paste0(rac_folder, 'site_', i, '/Bream_population/Inputs/Population_management/Management.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Food_Characterization.csv for each site
for (i in sites){
export <- food %>% select(2, 1)
export <- export[-1,] #drop header
output <- paste0(rac_folder, 'site_', i, '/Bream_population/Inputs/Forcings/Food_Characterization.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
trace(Bream_pop_main,edit=T)
library(doParallel)
cl <- makeCluster(4)
registerDoParallel(cl)
foreach(i=sites) %dopar% {
userpath <- paste0(rac_folder, "site_", i)
setwd(userpath) #working directory
forcings <- Bream_pop_dataloader(userpath) #load environmental variables
output <- Bream_pop_main(userpath, forcings)
}
library(doParallel)
cl <- makeCluster(4)
registerDoParallel(cl)
foreach(i=sites) %dopar% {
library(rac)
userpath <- paste0(rac_folder, "site_", i)
setwd(userpath) #working directory
forcings <- Bream_pop_dataloader(userpath) #load environmental variables
output <- Bream_pop_main(userpath, forcings)
}
library(doParallel)
cl <- makeCluster(4)
registerDoParallel(cl)
foreach(i=sites) %dopar% {
library(RAC)
userpath <- paste0(rac_folder, "site_", i)
setwd(userpath) #working directory
forcings <- Bream_pop_dataloader(userpath) #load environmental variables
output <- Bream_pop_main(userpath, forcings)
}
library(doParallel)
cl <- makeCluster(4)
registerDoParallel(cl)
foreach(i=sites) %dopar% {
library(RAC)
userpath <- paste0(rac_folder, "site_", i)
setwd(userpath) #working directory
forcings <- Bream_pop_dataloader(userpath) #load environmental variables
output <- Bream_pop_main(userpath, forcings)
}
userpath
library(doParallel)
cl <- makeCluster(3)
registerDoParallel(cl)
foreach(i=sites) %dopar% {
library(RAC)
userpath <- paste0(rac_folder, "site_", i)
setwd(userpath) #working directory
forcings <- Bream_pop_dataloader(userpath) #load environmental variables
output <- Bream_pop_main(userpath, forcings)
}
library(doParallel)
cl <- makeCluster(3)
registerDoParallel(cl)
foreach(i=sites) %dopar% {
userpath <- paste0(rac_folder, "site_", i)
setwd(userpath) #working directory
forcings <- Bream_pop_dataloader(userpath) #load environmental variables
output <- Bream_pop_main(userpath, forcings)
}
rac_folder
library(doParallel)
cl <- makeCluster(3)
registerDoParallel(cl)
foreach(i=sites) %dopar% {
library(RAC)
rac_folder <- "/Users/Zack/0_seawarden/r_rac/rac_bream/"
userpath <- paste0(rac_folder, "site_", i)
setwd(userpath) #working directory
forcings <- Bream_pop_dataloader(userpath) #load environmental variables
output <- Bream_pop_main(userpath, forcings)
}
library(doParallel)
cl <- makeCluster(3)
registerDoParallel(cl)
foreach(i=sites) %dopar% {
library(RAC)
rac_folder <- "/Users/Zack/0_seawarden/r_rac/rac_bream/"
userpath <- paste0(rac_folder, "site_", i)
setwd(userpath) #working directory
forcings <- Bream_pop_dataloader(userpath) #load environmental variables
output <- Bream_pop_main(userpath, forcings)
}
library(doParallel)
cl <- makeCluster(2)
registerDoParallel(cl)
foreach(i=sites) %dopar% {
library(RAC)
rac_folder <- "/Users/Zack/0_seawarden/r_rac/rac_bream/"
userpath <- paste0(rac_folder, "site_", i)
setwd(userpath) #working directory
forcings <- Bream_pop_dataloader(userpath) #load environmental variables
output <- Bream_pop_main(userpath, forcings)
}
getDoParWorkers()
library(doParallel)
cl <- makeCluster(2)
registerDoParallel(cl)
foreach(i=sites) %dopar% {
library(RAC)
rac_folder <- "/Users/Zack/0_seawarden/r_rac/rac_bream/"
userpath <- paste0(rac_folder, "site_", i)
setwd(userpath) #working directory
forcings <- Bream_pop_dataloader(userpath) #load environmental variables
output <- Bream_pop_main(userpath, forcings)
}
userpath
library(doSNOW)
install.packages("doSNOW")
library(doSNOW)
cl <- makeMPIcluster(2)
install.packages("doSNOW")
install.packages("Rmpi")
library(doSNOW)
library(Rmpi)
install.packages("doSNOW")
#install.packages("doSNOW")
#install.packages("Rmpi")
library(doSNOW)
library(Rmpi)
require(doSMP)
workers <- startWorkers(2) # My computer has 2 cores
install.packages("doSMP")
require(doSMP)
workers <- startWorkers(2) # My computer has 2 cores
library("foreach")
library("doParallel")
cl <- makeCluster(2) # create a cluster with 2 cores
registerDoParallel(cl) # register the cluster
res = foreach(i = sites) %dopar% {
userpath <- paste0(rac_folder, "site_", i)
setwd(userpath) #working directory
forcings <- Bream_pop_dataloader(userpath) #load environmental variables
output <- Bream_pop_main(userpath, forcings)} #run growth model
library("foreach")
library("doParallel")
cl <- makeCluster(2) # create a cluster with 2 cores
registerDoParallel(cl) # register the cluster
res = foreach(i = sites) %dopar% {
library(RAC)
userpath <- paste0(rac_folder, "site_", i)
setwd(userpath) #working directory
forcings <- Bream_pop_dataloader(userpath) #load environmental variables
output <- Bream_pop_main(userpath, forcings)} #run growth model
#first model run to generate feeding tables (using lapply instead of a forloop)
trace(Bream_pop_main,edit=T) #delete selector = "y"
library("foreach")
library("doParallel")
cl <- makeCluster(2) # create a cluster with 2 cores
registerDoParallel(cl) # register the cluster
res = foreach(i = sites) %dopar% {
library(RAC)
#load sst files
sst_folder <- '/Users/Zack/0_thesis_sst/ghrsst_csv_test/'
sst_list <- list.files(sst_folder, pattern = '.csv')
#load master files
rac_folder <- "/Users/Zack/0_seawarden/r_rac/rac_bream/"
master_files <- paste0(rac_folder, 'master_files/master_RAC-bream - ')
#prep files to generate feeding tables
feeding_prep <- read.csv(paste0(master_files, 'Feeding_Prep.csv'), header=TRUE, sep=",")
population_prep <- read.csv(paste0(master_files, 'Population_Prep.csv'), header=FALSE, sep=",")
#files for final model run
population <- read.csv(paste0(master_files, 'Population.csv'), header=FALSE, sep=",")
parameters <- read.csv(paste0(master_files, 'Parameters.csv'), header=FALSE, sep=",")
#files for both steps
management <- read.csv(paste0(master_files, 'Management.csv'), header=FALSE, sep=",")
food <- read.csv(paste0(master_files, 'Food_Characterization.csv'), header=FALSE, sep=",")
userpath <- paste0(rac_folder, "site_", i)
setwd(userpath) #working directory
forcings <- Bream_pop_dataloader(userpath) #load environmental variables
output <- Bream_pop_main(userpath, forcings)} #run growth model
library("foreach")
library("doParallel")
cl <- makeCluster(2) # create a cluster with 2 cores
registerDoParallel(cl) # register the cluster
res = foreach(i = sites) %dopar% {
library(RAC)
userpath <- paste0(rac_folder, "site_", i)
setwd(userpath) #working directory
forcings <- Bream_pop_dataloader(userpath) #load environmental variables
output <- Bream_pop_main(userpath, forcings)} #run growth model
forcings
library(RAC)
library(dplyr)
#command + shift + c
#load sst files
sst_folder <- '/Users/Zack/0_thesis_sst/ghrsst_csv_test/'
sst_list <- list.files(sst_folder, pattern = '.csv')
#load master files
rac_folder <- "/Users/Zack/0_seawarden/r_rac/rac_bream/"
master_files <- paste0(rac_folder, 'master_files/master_RAC-bream - ')
#prep files to generate feeding tables
feeding_prep <- read.csv(paste0(master_files, 'Feeding_Prep.csv'), header=TRUE, sep=",")
population_prep <- read.csv(paste0(master_files, 'Population_Prep.csv'), header=FALSE, sep=",")
#files for final model run
population <- read.csv(paste0(master_files, 'Population.csv'), header=FALSE, sep=",")
parameters <- read.csv(paste0(master_files, 'Parameters.csv'), header=FALSE, sep=",")
#files for both steps
management <- read.csv(paste0(master_files, 'Management.csv'), header=FALSE, sep=",")
food <- read.csv(paste0(master_files, 'Food_Characterization.csv'), header=FALSE, sep=",")
#sites <- list(23, 71, 92, 165, 172, 219) #study sites
sites <- list(165, 172, 219) #study sites
#create folder for each site, #add SST data
for (i in sites){
#create a folder for each site
site_folder <- paste0(rac_folder, 'site_', i, '/')
dir.create(site_folder)
#create RAC folders for each site
Bream_pop_skeleton(site_folder)
#add SST data
orglocation <- paste0(sst_folder, i, '_sst.csv')
newlocation <- paste0(site_folder, 'Bream_population/Inputs/Forcings/')
file.copy(from=orglocation, to=newlocation, overwrite = TRUE, recursive = FALSE, copy.mode = TRUE)
file.remove(paste0(newlocation, 'Water_temperature.csv'))
file.rename(paste0(newlocation, i, '_sst.csv'), paste0(newlocation, 'Water_temperature.csv'))}
#load prep files for each site
#generate Population.csv for each site
for (i in sites){
for (j in 0:(length(sites)-1)){
column <- j + 5 #!
export <- population_prep %>% select(1, 2, column, 3, 4)}
output <- paste0(rac_folder, 'site_', i, '/Bream_population/Inputs/Parameters/Population.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Parameters.csv for each site
for (i in sites){
export <- parameters %>% select(1, 2, 5, 3, 4) #5 prep parameters
output <- paste0(rac_folder, 'site_', i, '/Bream_population/Inputs/Parameters/Parameters.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Feeding.csv for each site
for (i in sites){
output <- paste0(rac_folder, 'site_', i, '/Bream_population/Inputs/Forcings/Feeding.csv')
write.table(feeding_prep, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Management.csv for each site
for (i in sites){
export <- management %>% select(1, 2, 3)
output <- paste0(rac_folder, 'site_', i, '/Bream_population/Inputs/Population_management/Management.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#generate Food_Characterization.csv for each site
for (i in sites){
export <- food %>% select(2, 1)
export <- export[-1,] #drop header
output <- paste0(rac_folder, 'site_', i, '/Bream_population/Inputs/Forcings/Food_Characterization.csv')
write.table(export, file = output, row.names=FALSE, col.names = FALSE, sep=",")}
#first model run to generate feeding tables (using lapply instead of a forloop)
trace(Bream_pop_main,edit=T) #delete selector = "y"
pre_rac <- function(sites){
userpath <- paste0(rac_folder, "site_", i)
setwd(userpath) #working directory
forcings <- Bream_pop_dataloader(userpath) #load environmental variables
output <- Bream_pop_main(userpath, forcings)} #run growth model
lapply(sites, pre_rac)
