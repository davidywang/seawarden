#raster to txt file
matrix<-raster2matrix(bath_2)
matrix <- round(matrix, 2)
matrix[matrix > 0] <- 0
matrix[is.na(matrix)] <- 0
output <- paste0(txt_output, targets$farm_id[i], '_bath.txt')
write.table(matrix, file=output, sep = "        ", row.names=FALSE, col.names=FALSE)}
#sep = "\t"
# for (i in 1:nrow(as.data.frame(targets))){
#   bath_txt(tif_output, i, txt_output)}
bath_txt(tif_output, 54, txt_output)
nrow(as.data.frame(targets))
library(dplyr)
library(raster)
library(sf)
library(oceanmap)
#input data
tif_input <- './Users/Zack/0_bath/bath_emodnet/bath_2018.tif'
tif_output <- '../data_bath/bath_tif/'
#tif_output <- '../data_bath/bath_tif_ctr/'
#txt_output <- '../data_bath/bath_txt/'
#load shapefile of farm sites
targets <- '../greece/1_sites/farm_500m_update.shp'
#targets <- '../greece/1_sites/farm_10m_update.shp'
targets <- st_read(targets)
#resample raster from 115m to 5m (FiCIM)
#https://datacarpentry.org/r-raster-vector-geospatial/03-raster-reproject-in-r/
bath_txt <- function(tif_output, i, txt_output){
bath <- raster(paste0(tif_output, targets$farm_id[i], "_bath.tif"))
bath_2<-projectRaster(bath, crs = crs(bath), res = res(bath)/23)
#writeRaster(s, file = "test.tif", "GTiff", overwrite=TRUE)
#raster to txt file
matrix<-raster2matrix(bath_2)
matrix <- round(matrix, 2)
matrix[matrix > 0] <- 0
matrix[is.na(matrix)] <- 0
output <- paste0(txt_output, targets$farm_id[i], '_bath.txt')
write.table(matrix, file=output, sep = "        ", row.names=FALSE, col.names=FALSE)}
#sep = "\t"
# for (i in 1:nrow(as.data.frame(targets))){
#   bath_txt(tif_output, i, txt_output)}
bath_txt(tif_output, 54 , txt_output)
library(dplyr)
library(raster)
library(sf)
library(oceanmap)
#input data
tif_input <- './Users/Zack/0_bath/bath_emodnet/bath_2018.tif'
tif_output <- '../data_bath/bath_tif/'
#tif_output <- '../data_bath/bath_tif_ctr/'
txt_output <- '../data_bath/bath_txt/'
#load shapefile of farm sites
targets <- '../greece/1_sites/farm_500m_update.shp'
#targets <- '../greece/1_sites/farm_10m_update.shp'
targets <- st_read(targets)
#resample raster from 115m to 5m (FiCIM)
#https://datacarpentry.org/r-raster-vector-geospatial/03-raster-reproject-in-r/
bath_txt <- function(tif_output, i, txt_output){
bath <- raster(paste0(tif_output, targets$farm_id[i], "_bath.tif"))
bath_2<-projectRaster(bath, crs = crs(bath), res = res(bath)/23)
#writeRaster(s, file = "test.tif", "GTiff", overwrite=TRUE)
#raster to txt file
matrix<-raster2matrix(bath_2)
matrix <- round(matrix, 2)
matrix[matrix > 0] <- 0
matrix[is.na(matrix)] <- 0
output <- paste0(txt_output, targets$farm_id[i], '_bath.txt')
write.table(matrix, file=output, sep = "        ", row.names=FALSE, col.names=FALSE)}
#sep = "\t"
# for (i in 1:nrow(as.data.frame(targets))){
#   bath_txt(tif_output, i, txt_output)}
bath_txt(tif_output, 54 , txt_output)
bath_txt(tif_output, 55 , txt_output)
#resample raster from 115m to 5m (FiCIM)
#https://datacarpentry.org/r-raster-vector-geospatial/03-raster-reproject-in-r/
bath_txt <- function(tif_output, i, txt_output){
bath <- raster(paste0(tif_output, targets$farm_id[i], "_bath.tif"))
bath_2<-projectRaster(bath, crs = crs(bath), res = res(bath)/23)
#writeRaster(s, file = "test.tif", "GTiff", overwrite=TRUE)
#raster to txt file
matrix<-raster2matrix(bath_2)
matrix <- round(matrix, 2)
matrix[matrix > 0] <- 0
matrix[is.na(matrix)] <- 0
output <- paste0(txt_output, targets$farm_id[i], '_bath.txt')
write.table(matrix, file=output, sep = " ", row.names=FALSE, col.names=FALSE)}
#sep = "\t"
# for (i in 1:nrow(as.data.frame(targets))){
#   bath_txt(tif_output, i, txt_output)}
bath_txt(tif_output, 55 , txt_output)
matrix(1:9, nrow = 3, ncol = 3)
matrix(0, nrow = 10, ncol = 10)
m<-matrix(-20, nrow = 400, ncol = 400)
write.table(m, file=output, sep = " ", row.names=FALSE, col.names=FALSE)
#resample raster from 115m to 5m (FiCIM)
#https://datacarpentry.org/r-raster-vector-geospatial/03-raster-reproject-in-r/
bath_txt <- function(tif_output, i, txt_output){
bath <- raster(paste0(tif_output, targets$farm_id[i], "_bath.tif"))
bath_2<-projectRaster(bath, crs = crs(bath), res = res(bath)/23)
#writeRaster(s, file = "test.tif", "GTiff", overwrite=TRUE)
#raster to txt file
matrix <-raster2matrix(bath_2)
matrix <- round(matrix, 2)
matrix[matrix > 0] <- 0
matrix[is.na(matrix)] <- 0
matrix <-matrix(-20, nrow = 400, ncol = 400)
output <- paste0(txt_output, targets$farm_id[i], '_bath.txt')
write.table(matrix, file=output, sep = " ", row.names=FALSE, col.names=FALSE)}
#sep = "\t"
# for (i in 1:nrow(as.data.frame(targets))){
#   bath_txt(tif_output, i, txt_output)}
bath_txt(tif_output, 55 , txt_output)
#resample raster from 115m to 5m (FiCIM)
#https://datacarpentry.org/r-raster-vector-geospatial/03-raster-reproject-in-r/
bath_txt <- function(tif_output, i, txt_output){
bath <- raster(paste0(tif_output, targets$farm_id[i], "_bath.tif"))
bath_2<-projectRaster(bath, crs = crs(bath), res = res(bath)/23)
#writeRaster(s, file = "test.tif", "GTiff", overwrite=TRUE)
#raster to txt file
matrix <-raster2matrix(bath_2)
matrix <- round(matrix, 2)
matrix[matrix > 0] <- 0
matrix[is.na(matrix)] <- 0
matrix <-matrix(-20.5, nrow = 400, ncol = 400)
output <- paste0(txt_output, targets$farm_id[i], '_bath.txt')
write.table(matrix, file=output, sep = " ", row.names=FALSE, col.names=FALSE)}
#sep = "\t"
# for (i in 1:nrow(as.data.frame(targets))){
#   bath_txt(tif_output, i, txt_output)}
bath_txt(tif_output, 55 , txt_output)
#resample raster from 115m to 5m (FiCIM)
#https://datacarpentry.org/r-raster-vector-geospatial/03-raster-reproject-in-r/
bath_txt <- function(tif_output, i, txt_output){
bath <- raster(paste0(tif_output, targets$farm_id[i], "_bath.tif"))
bath_2<-projectRaster(bath, crs = crs(bath), res = res(bath)/23)
#writeRaster(s, file = "test.tif", "GTiff", overwrite=TRUE)
#raster to txt file
matrix <-raster2matrix(bath_2)
#matrix <- round(matrix, 2)
matrix <- round(matrix, 0)
matrix[matrix > 0] <- 0
matrix[is.na(matrix)] <- 0
#matrix <-matrix(-20.5, nrow = 400, ncol = 400) #temp
output <- paste0(txt_output, targets$farm_id[i], '_bath.txt')
write.table(matrix, file=output, sep = " ", row.names=FALSE, col.names=FALSE)}
#sep = "\t"
# for (i in 1:nrow(as.data.frame(targets))){
#   bath_txt(tif_output, i, txt_output)}
bath_txt(tif_output, 55 , txt_output)
#resample raster from 115m to 5m (FiCIM)
#https://datacarpentry.org/r-raster-vector-geospatial/03-raster-reproject-in-r/
bath_txt <- function(tif_output, i, txt_output){
bath <- raster(paste0(tif_output, targets$farm_id[i], "_bath.tif"))
bath_2<-projectRaster(bath, crs = crs(bath), res = res(bath)/23)
#writeRaster(s, file = "test.tif", "GTiff", overwrite=TRUE)
#raster to txt file
matrix <-raster2matrix(bath_2)
#matrix <- round(matrix, 2)
matrix <- round(matrix, 0)
matrix[matrix > 0] <- 0
matrix[is.na(matrix)] <- 0
#matrix <-matrix(-20.5, nrow = 400, ncol = 400) #temp
output <- paste0(txt_output, targets$farm_id[i], '_bath.txt')
write.table(matrix, file=output, sep = " ", row.names=FALSE, col.names=FALSE)}
#sep = "\t"
# for (i in 1:nrow(as.data.frame(targets))){
#   bath_txt(tif_output, i, txt_output)}
bath_txt(tif_output, 55 , txt_output)
#raster to txt file
matrix <-raster2matrix(bath_2)
bath <- raster(paste0(tif_output, 55, "_bath.tif"))
bath_2<-projectRaster(bath, crs = crs(bath), res = res(bath)/23)
#writeRaster(s, file = "test.tif", "GTiff", overwrite=TRUE)
#raster to txt file
matrix <-raster2matrix(bath_2)
#matrix <- round(matrix, 2)
matrix <- round(matrix, 0)
matrix[matrix > 0] <- 0
matrix[is.na(matrix)] <- 0
#matrix <-matrix(-20.5, nrow = 400, ncol = 400) #temp
output <- paste0(txt_output, targets$farm_id[i], '_bath.txt')
write.table(matrix, file=output, sep = " ", row.names=FALSE, col.names=FALSE)
matrix
dim(matrix)
matrix <-matrix(-20.5, nrow = 400, ncol = 400) #temp
dim(matrix)
matrix <-raster2matrix(bath_2)
dim(matrix)
bath_2
# l=length(list.files(tif_output, pattern = '.tif'))
#
# #for (i in 1:10){
# for (i in 1:l){
#   file <- paste0(tif_output, i-1, '_bath.tif')
#   plot(raster(file))}
file <- paste0(tif_output, 54, '_bath.tif')
plot(raster(file))
bath
bath <- raster(paste0(tif_output, 55, "_bath.tif"))
bath_2<-projectRaster(bath, crs = crs(bath), res = res(bath)/5)
matrix <-raster2matrix(bath_2)
matrix <-round(matrix, 0)
matrix[matrix > 0] <- 0
matrix[is.na(matrix)] <- 0
dim(matrix)
bath <- raster(paste0(tif_output, 55, "_bath.tif"))
bath_2<-projectRaster(bath, crs = crs(bath), res = res(bath)/40)
matrix <-raster2matrix(bath_2)
matrix <-round(matrix, 0)
matrix[matrix > 0] <- 0
matrix[is.na(matrix)] <- 0
output <- paste0(txt_output, targets$farm_id[i], '_bath.txt')
write.table(matrix, file=output, sep = " ", row.names=FALSE, col.names=FALSE)
matrix <-raster2matrix(bath_2)
dim(matrix)
bath <- raster(paste0(tif_output, targets$farm_id[i], "_bath.tif"))
bath <- raster(paste0(tif_output, 55, "_bath.tif"))
bath_2<-projectRaster(bath, crs = crs(bath), res = res(bath)/40)
writeRaster(s, file = "test.tif", "GTiff", overwrite=TRUE)
bath <- raster(paste0(tif_output, 55, "_bath.tif"))
bath_2<-projectRaster(bath, crs = crs(bath), res = res(bath)/40)
writeRaster(bath_2, file = "test.tif", "GTiff", overwrite=TRUE)
library(dplyr)
library(raster)
library(sf)
library(oceanmap)
#input data
tif_input <- './Users/Zack/0_bath/bath_emodnet/bath_2018.tif'
tif_output <- '../data_bath/bath_tif/'
#tif_output <- '../data_bath/bath_tif_ctr/'
txt_output <- '../data_bath/bath_txt/'
#load shapefile of farm sites
targets <- '../greece/1_sites/farm_1000m_update.shp'
#targets <- '../greece/1_sites/farm_10m_update.shp'
targets <- st_read(targets)
#function to crop raster to area of interest
crop_tool <- function(image_file, target){
raster <- raster(image_file)
raster_crop <- crop(raster, target)}
#extract tif_input for each site
for (i in 1:nrow(as.data.frame(targets))){
crop <- crop_tool(tif_input, targets[i,])
output <- paste0(tif_output, targets$farm_id[i], '_bath.tif')
#output <- paste0(tif_output, targets$Id[i], '_bath.tif')
writeRaster(crop, file = output, "GTiff", overwrite=TRUE)}
library(dplyr)
library(raster)
library(sf)
library(oceanmap)
#input data
tif_input <- '/Users/Zack/0_bath/bath_emodnet/bath_2018.tif'
tif_output <- '../data_bath/bath_tif/'
#tif_output <- '../data_bath/bath_tif_ctr/'
txt_output <- '../data_bath/bath_txt/'
#load shapefile of farm sites
targets <- '../greece/1_sites/farm_1000m_update.shp'
#targets <- '../greece/1_sites/farm_10m_update.shp'
targets <- st_read(targets)
#extract tif_input for each site
for (i in 1:nrow(as.data.frame(targets))){
crop <- crop_tool(tif_input, targets[i,])
output <- paste0(tif_output, targets$farm_id[i], '_bath.tif')
#output <- paste0(tif_output, targets$Id[i], '_bath.tif')
writeRaster(crop, file = output, "GTiff", overwrite=TRUE)}
#extract tif_input for each site
for (i in 1:nrow(as.data.frame(targets))){
crop <- crop_tool(tif_input, targets[i,])
output <- paste0(tif_output, targets$farm_id[i], '_bath.tif')
#output <- paste0(tif_output, targets$Id[i], '_bath.tif')
writeRaster(crop, file = output, "GTiff", overwrite=TRUE)}
# l=length(list.files(tif_output, pattern = '.tif'))
#
# #for (i in 1:10){
# for (i in 1:l){
#   file <- paste0(tif_output, i-1, '_bath.tif')
#   plot(raster(file))}
file <- paste0(tif_output, 54, '_bath.tif')
plot(raster(file))
paste0(tif_output, 54, '_bath.tif')
# l=length(list.files(tif_output, pattern = '.tif'))
#
# #for (i in 1:10){
# for (i in 1:l){
#   file <- paste0(tif_output, i-1, '_bath.tif')
#   plot(raster(file))}
file <- paste0(tif_output, 54, '_bath.tif')
plot(raster(file))
bath <- raster(paste0(tif_output, 55, "_bath.tif"))
bath_2<-projectRaster(bath, crs = crs(bath), res = res(bath)/40)
writeRaster(bath_2, file = "test.tif", "GTiff", overwrite=TRUE)
matrix <-raster2matrix(bath_2)
matrix <-round(matrix, 0)
matrix[matrix > 0] <- 0
matrix[is.na(matrix)] <- 0
dim(matrix)
bath <- raster(paste0(tif_output, 54, "_bath.tif"))
bath_2<-projectRaster(bath, crs = crs(bath), res = res(bath)/23)
writeRaster(bath_2, file = "test.tif", "GTiff", overwrite=TRUE)
matrix <-raster2matrix(bath_2)
matrix <-round(matrix, 0)
matrix[matrix > 0] <- 0
matrix[is.na(matrix)] <- 0
matrix <-raster2matrix(bath_2)
dim(matrix)
#54 bath
bath <- raster(paste0(tif_output, 54, "_bath.tif"))
bath_2<-projectRaster(bath, crs = crs(bath), res = res(bath)/23)
#writeRaster(bath_2, file = "test.tif", "GTiff", overwrite=TRUE)
matrix <-raster2matrix(bath_2)
matrix <-round(matrix, 0)
matrix[matrix > 0] <- 0 #remove postive values
matrix[is.na(matrix)] <- 0 #fill empty values
output <- paste0(txt_output, targets$farm_id[i], '_bath.txt')
write.table(matrix, file=output, sep = " ", row.names=FALSE, col.names=FALSE)
dim(matrix)
matrix[[58:458,1:400]
matrix[58:458,1:400]
matrix[58:458,1:400]
dim(matrix[58:458,1:400])
#54 bath
bath <- raster(paste0(tif_output, 54, "_bath.tif"))
bath_2<-projectRaster(bath, crs = crs(bath), res = res(bath)/23)
#writeRaster(bath_2, file = "test.tif", "GTiff", overwrite=TRUE)
matrix <-raster2matrix(bath_2)
matrix <-round(matrix, 0)
matrix <- matrix[58:457,1:400]
matrix[matrix > 0] <- 0 #remove postive values
matrix[is.na(matrix)] <- 0 #fill empty values
output <- paste0(txt_output, targets$farm_id[i], '_bath.txt')
write.table(matrix, file=output, sep = " ", row.names=FALSE, col.names=FALSE)
dim(matrix)
#54 bath
bath <- raster(paste0(tif_output, 54, "_bath.tif"))
bath_2<-projectRaster(bath, crs = crs(bath), res = res(bath)/23)
#writeRaster(bath_2, file = "test.tif", "GTiff", overwrite=TRUE)
matrix <-raster2matrix(bath_2)
matrix <-round(matrix, 0)
matrix <- matrix[58:457,1:400]
matrix[matrix > 0] <- 0 #remove postive values
matrix[is.na(matrix)] <- 0 #fill empty values
output <- paste0(txt_output, 54, '_bath.txt')
write.table(matrix, file=output, sep = " ", row.names=FALSE, col.names=FALSE)
dim(matrix)
library(dplyr)
#create one csv per farm site
farmsites <- read.csv('../r_rac/master_inventory - Farm_Sites.csv', header=TRUE, sep=",")
sites <- farmsites$farm_site
#sites <-117
sites <-54
rac_folder <- '../r_rac/rac_seabass/'
site_folder <- '/Bass_population/Outputs/Out_csv/'
rac_folder_2 <- '../r_rac/rac_bream/'
site_folder_2 <- '/Bream_population/Outputs/Out_csv/'
#function to convert RAC predictions to C, N, P
waste_compiler <- function(rac_folder, site_folder, i){
compiled <- read.csv(paste0(rac_folder, 'output_compiled/site_', i, '_compiled.csv'), header=TRUE, sep=",")
Pexc <- compiled$faeces_p*.4 + compiled$faeces_l*2.3 + compiled$faeces_c*0
Nexc <- compiled$faeces_p*15.9 + compiled$faeces_l*2.6 + compiled$faeces_c*0
Cexc <- compiled$faeces_p*54.5 + compiled$faeces_l*77 + compiled$faeces_c*40
Pwst <- compiled$feed_p*.4 + compiled$feed_l*2.3 + compiled$feed_c*0
Nwst <- compiled$feed_p*15.9 + compiled$feed_l*2.6 + compiled$feed_c*0
Cwst <- compiled$feed_p*54.5 + compiled$feed_l*77 + compiled$feed_c*40
compiled <- data.frame(cbind(compiled$day, Pexc, Nexc, Cexc, Pwst, Nwst, Cwst))
#colnames(compiled) <- c("Day", "Pexc (g)", "Nexc (g)", "Cexc (g)", "Pwst (g)", "Nwst (g)", "Cwst (g)")
harvest <-  read.csv(paste0(rac_folder, 'site_', i, site_folder, 'Days_to_commercial_size.csv'))
harvest <- harvest %>% select(3)
harvest <- harvest[[1]]
compiled <- compiled[1:harvest,]
name <- paste0(rac_folder, 'output_waste/', i, '_total_waste.csv')
write.table(compiled, file = name, row.names=FALSE, col.names = TRUE, sep=",")}
#prepare total waste conversions for all sites
for (i in sites){
waste_compiler(rac_folder, site_folder, i)
waste_compiler(rac_folder_2, site_folder_2, i)}
#generate txt files specific to net pens of a farm site
folder <- "../r_ficim/"
site_id = sites
site <- read.csv(paste0(folder, 'FiCIM - ', site_id, '.csv'), header=TRUE, sep=",", stringsAsFactors = FALSE)
#index <- nrow(site) - 1 #remove last row
#load param template
param <- read.csv(paste0(folder, 'FiCIM - Param.csv'), header=FALSE, sep=",", stringsAsFactors = FALSE)
#load date template
date <- read.csv(paste0(folder, 'FiCIM - Julian_Day.csv'), header=FALSE, sep=",", stringsAsFactors = FALSE)
hr <- read.csv(paste0(folder, 'FiCIM - Julian_Hr.csv'), header=FALSE, sep=",", stringsAsFactors = FALSE)
#load bath and current data
bath <- "../data_bath/bath_txt/"
current <- "../data_current/current_txt/"
#copy bath and current data
file.copy(paste0(bath, site_id, "_bath.txt"), folder, overwrite = TRUE) #xport bath
#file.copy(paste0(current, site_id, "_current.txt"), folder, overwrite = TRUE) #export current
#add date to current data
c <- read.delim(paste0(current, site_id, "_current.txt"), header = FALSE, sep = "\t")
h <- rep(hr, nrow(c)/24)
d <- rep(date$V4, each = 24) + unlist(h)
c <- cbind(d, c)
c <- c %>% rename("Julian Hour" = d, "u (m/s)" = V1, "v (m/s)" = V2)
name <- paste0(folder, site_id, '_current.txt')
write.table(c, name, sep = "\t", row.names=FALSE, col.names=TRUE, quote = FALSE)
#generate txt files
index = 1
for (i in 1:index){
#load total_waste.csv
name <- paste0("/Users/Zack/0_seawarden/r_rac/rac_", site$Species[i], '/output_waste/', site$farm_id[i], '_total_waste.csv')
waste <- read.csv(name, header=TRUE, sep=",", stringsAsFactors = FALSE)
#param.txt
param$V1[2] <- nrow(waste) #days
param$V2[2] <- site$Species.Index[i] #species
param$V3[2] <- site$ORIG_FID[i] #cage number
param$V4[2] <- site$Cgx[i] #cage position
param$V5[2] <- site$Cgy[i] #cage position
param$V1[6] <- 0 #0 = no bath
param$V2[6] <- -20 #depth (meters)
#reduce total waste to net pen
#date %>% rename("Day" = V1) ?
waste <- waste[2:7] * as.numeric(site$Percentage[i]) #reduce waste total to net pen size
waste <- round(waste, 5)
waste <- cbind(date$V4[1:nrow(waste)], waste) #add julian date, combine with waste
names(waste)[1] <- "Day"
#export param.txt
name <- paste0(folder, site$farm_id[i], '_', site$ORIG_FID[i], '_param_', site$Species[i], '.txt')
write.table(param, name, sep = "\t", row.names=FALSE, col.names=FALSE, quote = FALSE)
#export total_waste.txt
name <- paste0(folder, site$farm_id[i], '_', site$ORIG_FID[i], '_total_waste_', site$Species[i], '.txt')
write.table(waste, sep = "        ", name, row.names=FALSE, col.names=TRUE, quote = FALSE)}
#generate txt files
index = 1
for (i in 1:index){
#load total_waste.csv
name <- paste0("/Users/Zack/0_seawarden/r_rac/rac_", site$Species[i], '/output_waste/', site$farm_id[i], '_total_waste.csv')
waste <- read.csv(name, header=TRUE, sep=",", stringsAsFactors = FALSE)
#param.txt
param$V1[2] <- nrow(waste) #days
param$V2[2] <- site$Species.Index[i] #species
param$V3[2] <- site$ORIG_FID[i] #cage number
param$V4[2] <- site$Cgx[i] #cage position
param$V5[2] <- site$Cgy[i] #cage position
param$V1[6] <- 1 #0 = no bath
#param$V2[6] <- -20 #depth (meters)
#reduce total waste to net pen
#date %>% rename("Day" = V1) ?
waste <- waste[2:7] * as.numeric(site$Percentage[i]) #reduce waste total to net pen size
waste <- round(waste, 5)
waste <- cbind(date$V4[1:nrow(waste)], waste) #add julian date, combine with waste
names(waste)[1] <- "Day"
#export param.txt
name <- paste0(folder, site$farm_id[i], '_', site$ORIG_FID[i], '_param_', site$Species[i], '.txt')
write.table(param, name, sep = "\t", row.names=FALSE, col.names=FALSE, quote = FALSE)
#export total_waste.txt
name <- paste0(folder, site$farm_id[i], '_', site$ORIG_FID[i], '_total_waste_', site$Species[i], '.txt')
write.table(waste, sep = "        ", name, row.names=FALSE, col.names=TRUE, quote = FALSE)}
dim(matrix)
dim <- dim(matrix)
dim[1]
dim[2]
#resample raster from 115m to 5m (FiCIM) and export as txt file
#https://datacarpentry.org/r-raster-vector-geospatial/03-raster-reproject-in-r/
bath_txt <- function(tif_output, i, txt_output){
bath <- raster(paste0(tif_output, targets$farm_id[i], "_bath.tif"))
bath_2<-projectRaster(bath, crs = crs(bath), res = res(bath)/23)
#writeRaster(s, file = "test.tif", "GTiff", overwrite=TRUE)
matrix <-raster2matrix(bath_2)
matrix <- round(matrix, 0)
dim <- dim(matrix) #automatic matrix triming needs to be added
matrix <- matrix[58:457,1:400] #select center of matrix 400x400
matrix[matrix > 0] <- 0 #remove postive values
matrix[is.na(matrix)] <- 0 #fill empty values
#matrix <-matrix(-20.5, nrow = 400, ncol = 400) #temporary
output <- paste0(txt_output, targets$farm_id[i], '_bath.txt')
write.table(matrix, file=output, sep = " ", row.names=FALSE, col.names=FALSE)}
# for (i in 1:nrow(as.data.frame(targets))){
#   bath_txt(tif_output, i, txt_output)}
bath_txt(tif_output, 54, txt_output)
targets$farm_id[i]
#resample raster from 115m to 5m (FiCIM) and export as txt file
#https://datacarpentry.org/r-raster-vector-geospatial/03-raster-reproject-in-r/
bath_txt <- function(tif_output, i, txt_output){
bath <- raster(paste0(tif_output, targets$farm_id[i], "_bath.tif"))
bath_2<-projectRaster(bath, crs = crs(bath), res = res(bath)/23)
#writeRaster(s, file = "test.tif", "GTiff", overwrite=TRUE)
matrix <-raster2matrix(bath_2)
matrix <- round(matrix, 0)
dim <- dim(matrix) #automatic matrix triming needs to be added
matrix <- matrix[58:457,1:400] #select center of matrix 400x400
matrix[matrix > 0] <- 0 #remove postive values
matrix[is.na(matrix)] <- 0 #fill empty values
#matrix <-matrix(-20.5, nrow = 400, ncol = 400) #temporary
#output <- paste0(txt_output, targets$farm_id[i], '_bath.txt')
output <- paste0(txt_output, i, '_bath.txt')
write.table(matrix, file=output, sep = " ", row.names=FALSE, col.names=FALSE)}
# for (i in 1:nrow(as.data.frame(targets))){
#   bath_txt(tif_output, i, txt_output)}
bath_txt(tif_output, 54, txt_output)
#resample raster from 115m to 5m (FiCIM) and export as txt file
#https://datacarpentry.org/r-raster-vector-geospatial/03-raster-reproject-in-r/
bath_txt <- function(tif_output, i, txt_output){
bath <- raster(paste0(tif_output, targets$farm_id[i], "_bath.tif"))
bath_2<-projectRaster(bath, crs = crs(bath), res = res(bath)/23)
#writeRaster(s, file = "test.tif", "GTiff", overwrite=TRUE)
matrix <-raster2matrix(bath_2)
matrix <- round(matrix, 0)
dim <- dim(matrix) #automatic matrix triming needs to be added
matrix <- matrix[58:457,1:400] #select center of matrix 400x400
matrix[matrix > 0] <- 0 #remove postive values
matrix[is.na(matrix)] <- 0 #fill empty values
#matrix <-matrix(-20.5, nrow = 400, ncol = 400) #temporary
#output <- paste0(txt_output, targets$farm_id[i], '_bath.txt')
output <- paste0(txt_output, i, '_bath.txt')
write.table(matrix, file=output, sep = " ", row.names=FALSE, col.names=FALSE)}
# for (i in 1:nrow(as.data.frame(targets))){
#   bath_txt(tif_output, i, txt_output)}
bath_txt(tif_output, 54, txt_output)
print(dim)
